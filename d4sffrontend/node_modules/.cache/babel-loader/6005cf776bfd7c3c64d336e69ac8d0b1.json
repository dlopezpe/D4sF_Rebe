{"remainingRequest":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\src\\components\\adminActions\\SentinelInstancesRefreshParcels.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\src\\components\\adminActions\\SentinelInstancesRefreshParcels.vue","mtime":1671529918003},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzovVXNlcnMvaWNhbW9uLlNNQi9EZXNrdG9wL1BhcmNlbGFzL2Q0c2Zmcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IGdldEFsbEVudGVycHJpc2VzLCBzZXRQYXJjZWxzRm9ySW5zdGFuY2UgfSBmcm9tICdAL2NydWRGdW5jdGlvbnMvY3J1ZEVudGVycHJpc2UnOyAvL2dldEVudGVycHJpc2UKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnUGFyY2Vsc1RvU2VudGluZWxDb21wb25lbnQnLAogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByb3dTZWxlY3RzOiBbXSwKICAgICAgbGlzdGFkb1BhcmNlbGFzOiBBcnJheSwKICAgICAgbGlzdGFkb1BhcmNlbGFzRmlsdGVyOiBBcnJheSwKICAgICAgYXJyRW1wcmVzYXM6IFtdLAogICAgICByb3dTaXplOiAiIiwKICAgICAgYXV0b1dpZHRoOiBmYWxzZSwKICAgICAgc29ydGFibGU6IGZhbHNlLAogICAgICB0aXRsZTogIkxpc3RhZG8gZGUgRW1wcmVzYXMiLAogICAgICBhY3Rpb25CYXJBcmlhTGFiZWw6ICJDdXN0b20gYWN0aW9uIGJhciBhcmlhIGxhYmVsIiwKICAgICAgYmF0Y2hDYW5jZWxMYWJlbDogIkNhbmNlbCIsCiAgICAgIHplYnJhOiB0cnVlLAogICAgICBjb2x1bW5zOiBbewogICAgICAgIGtleTogJ2lkJywKICAgICAgICBsYWJlbDogJ0lEJwogICAgICB9LCB7CiAgICAgICAga2V5OiAnbmFtZScsCiAgICAgICAgbGFiZWw6ICdOb21icmUgZGUgbGEgZW1wcmVzYScKICAgICAgfSwgewogICAgICAgIGtleTogJ3NlbnRpbmVsX2luc3RhbmNlJywKICAgICAgICBsYWJlbDogIkluc3RhbmNpYSBkZSBzZW50aW5lbCIKICAgICAgfV0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICByZWZyZXNjYXJJbnNhbmNpYTogZnVuY3Rpb24gcmVmcmVzY2FySW5zYW5jaWEoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcmVzdWx0ID0gdGhpcy5hcnJFbXByZXNhcy5maWx0ZXIoZnVuY3Rpb24gKGVtcHJlc2EpIHsKICAgICAgICByZXR1cm4gX3RoaXMucm93U2VsZWN0cy5pbmNsdWRlcyhlbXByZXNhLmlkKTsKICAgICAgfSk7CiAgICAgIGNvbnNvbGUuaW5mbyhyZXN1bHQpOwogICAgICByZXN1bHQubWFwKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGVudGVycHJpc2UpIHsKICAgICAgICAgIHZhciBhbGxDb29yZGluYXRlczsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgYWxsQ29vcmRpbmF0ZXMgPSBBcnJheSgpOwogICAgICAgICAgICAgICAgICBlbnRlcnByaXNlLnBhcmNlbHMuZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChwYXJjZWwpIHsKICAgICAgICAgICAgICAgICAgICBhbGxDb29yZGluYXRlcy5wdXNoKHBhcmNlbC5nZW9tZXRyeS5jb29yZGluYXRlcyk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oInBhcmNlbGFzIGRlICIuY29uY2F0KGVudGVycHJpc2UubmFtZSksIGFsbENvb3JkaW5hdGVzKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRQYXJjZWxzRm9ySW5zdGFuY2UoZW50ZXJwcmlzZS5uYW1lLCBhbGxDb29yZGluYXRlcywgZW50ZXJwcmlzZS5zZW50aW5lbF9pbnN0YW5jZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oIk9LIHJlZnJlc2NhZG8gcGFyY2VsYXMgZGUgIi5jb25jYXQoZW50ZXJwcmlzZS5uYW1lKSwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5pbmZvKCJFUlJPUiByZWZyZXNjYWRvIHBhcmNlbGFzIGRlICIuY29uY2F0KGVudGVycHJpc2UubmFtZSksIGVycik7CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKTsgLy9wb3N0UGFyY2Vsc05vdFNlbnRpbmVsSW5zdGFuY2UodGhpcy5yb3dTZWxlY3RzKQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsvL2NvbnNvbGUuaW5mbygnVXNlciBMb2dnZWQnKQogIH0sCiAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUoKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICBnZXRBbGxFbnRlcnByaXNlcygpLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzcG9uc2UpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMyLmFyckVtcHJlc2FzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgIF90aGlzMi5mbGFnSW5kaWNhdGluZ0RhdGFIYXNCZWVuTG9hZGVkSW5WYXJpYWJsZXMgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpKTsKICB9Cn07"},{"version":3,"sources":["SentinelInstancesRefreshParcels.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAAA,iBAAA,EAAA,qBAAA,QAAA,gCAAA,C,CAAA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,4BADA;AAEA,EAAA,UAAA,EAAA,EAFA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,eAAA,EAAA,KAFA;AAGA,MAAA,qBAAA,EAAA,KAHA;AAIA,MAAA,WAAA,EAAA,EAJA;AAKA,MAAA,OAAA,EAAA,EALA;AAMA,MAAA,SAAA,EAAA,KANA;AAOA,MAAA,QAAA,EAAA,KAPA;AAQA,MAAA,KAAA,EAAA,qBARA;AASA,MAAA,kBAAA,EAAA,8BATA;AAUA,MAAA,gBAAA,EAAA,QAVA;AAWA,MAAA,KAAA,EAAA,IAXA;AAYA,MAAA,OAAA,EAAA,CACA;AACA,QAAA,GAAA,EAAA,IADA;AAEA,QAAA,KAAA,EAAA;AAFA,OADA,EAKA;AACA,QAAA,GAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA;AAFA,OALA,EASA;AACA,QAAA,GAAA,EAAA,mBADA;AAEA,QAAA,KAAA;AAFA,OATA;AAZA,KAAA;AA2BA,GAhCA;AAiCA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,+BACA;AAAA;;AACA,UAAA,MAAA,GAAA,KAAA,WAAA,CAAA,MAAA,CAAA,UAAA,OAAA;AAAA,eAAA,KAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AAAA,OAAA,CAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AACA,MAAA,MAAA,CAAA,GAAA;AAAA,2EAAA,iBAAA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAAA,cADA,GACA,KAAA,EADA;AAEA,kBAAA,UAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA;AACA,oBAAA,cAAA,CAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,WAAA;AACA,mBAFA;AAGA,kBAAA,OAAA,CAAA,IAAA,uBAAA,UAAA,CAAA,IAAA,GAAA,cAAA;AALA;AAAA,yBAMA,qBAAA,CAAA,UAAA,CAAA,IAAA,EAAA,cAAA,EAAA,UAAA,CAAA,iBAAA,CAAA,CACA,IADA,CACA,UAAA,QAAA,EAAA;AACA,oBAAA,OAAA,CAAA,IAAA,qCAAA,UAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AACA,mBAHA,EAIA,KAJA,CAIA,UAAA,GAAA;AAAA,2BAAA,OAAA,CAAA,IAAA,wCAAA,UAAA,CAAA,IAAA,GAAA,GAAA,CAAA;AAAA,mBAJA,CANA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA;;AAAA;AAAA;AAAA;AAAA,WAHA,CAeA;AACA;AAjBA,GAjCA;AAoDA,EAAA,OAAA,EAAA,mBAAA,CACA;AACA,GAtDA;AAuDA,EAAA,YAvDA,0BAuDA;AAAA;;AACA,IAAA,iBAAA,GACA,IADA;AAAA,0EACA,kBAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,MAAA,CAAA,WAAA,GAAA,QAAA,CAAA,IAAA;AACA,gBAAA,MAAA,CAAA,0CAAA,GAAA,IAAA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADA;;AAAA;AAAA;AAAA;AAAA;AAKA;AA7DA,CAAA","sourcesContent":["<template>\r\n    <div class=\"bx--grid\">\r\n        <template id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Procesado de las instancias de Sentinel para volver a cargar todas las parcelas en la instancia de nuevo</p>\r\n            </div>\r\n        </template>\r\n        <template class=\"bx--row\">\r\n            <cv-data-table\r\n                :row-size=\"rowSize\"\r\n                :auto-width=\"autoWidth\"\r\n                :sortable=\"sortable\"\r\n                :title=\"title\"\r\n                :action-bar-aria-label=\"actionBarAriaLabel\"\r\n                :batch-cancel-label=\"batchCancelLabel\"\r\n                :zebra=\"zebra\"\r\n                :columns=\"columns\"\r\n                v-model=\"rowSelects\"\r\n            >\r\n            <template v-if=\"true\" slot=\"batch-actions\">\r\n                <cv-button @click=\"refrescarInsancia\">\r\n                    Refrescar Instancia\r\n                    <Analytics20 class=\"bx--btn__icon\" />\r\n                </cv-button> \r\n            </template>\r\n            <template slot=\"data\" v-if=\"listadoParcelas\">\r\n                <cv-data-table-row\r\n                    v-for=\"enterprise in arrEmpresas\"\r\n                    :key=\"`${enterprise.id}`\"\r\n                    :value=\"`${enterprise.id}`\"\r\n                >\r\n                    <cv-data-table-cell>{{enterprise.id}}</cv-data-table-cell>\r\n                    <cv-data-table-cell>{{enterprise.name}}</cv-data-table-cell>\r\n                    <cv-data-table-cell>{{enterprise.sentinel_instance}}</cv-data-table-cell>\r\n                </cv-data-table-row>\r\n            </template>\r\n            </cv-data-table>\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {getAllEnterprises, setParcelsForInstance} from '@/crudFunctions/crudEnterprise'//getEnterprise\r\n\r\nexport default {\r\n    name: 'ParcelsToSentinelComponent',\r\n    components: {\r\n    },\r\n    data(){\r\n        return {\r\n            rowSelects: [],\r\n            listadoParcelas: Array,\r\n            listadoParcelasFilter: Array,\r\n            arrEmpresas: [],\r\n            rowSize: \"\",\r\n            autoWidth: false,\r\n            sortable: false,\r\n            title: \"Listado de Empresas\",\r\n            actionBarAriaLabel: \"Custom action bar aria label\",\r\n            batchCancelLabel: \"Cancel\",\r\n            zebra: true,\r\n            columns: [\r\n                {\r\n                    key: 'id',\r\n                    label: 'ID',\r\n                },\r\n                {\r\n                    key: 'name',\r\n                    label: 'Nombre de la empresa',\r\n                },\r\n                {\r\n                    key: 'sentinel_instance',\r\n                    label: `Instancia de sentinel`,\r\n                },\r\n            ],\r\n        }\r\n    },\r\n    methods: {\r\n        refrescarInsancia(){\r\n            const result = this.arrEmpresas.filter(empresa => this.rowSelects.includes(empresa.id))\r\n            console.info(result)\r\n            result.map( async enterprise => {\r\n                const allCoordinates = Array();\r\n                enterprise.parcels.features.map(parcel => {\r\n                    allCoordinates.push(parcel.geometry.coordinates)\r\n                })\r\n                console.info(`parcelas de ${enterprise.name}`, allCoordinates)\r\n                await setParcelsForInstance(enterprise.name, allCoordinates, enterprise.sentinel_instance)\r\n                    .then(response => {\r\n                        console.info(`OK refrescado parcelas de ${enterprise.name}`, response.data)\r\n                    })\r\n                    .catch(err => console.info(`ERROR refrescado parcelas de ${enterprise.name}`, err))\r\n            })\r\n            //postParcelsNotSentinelInstance(this.rowSelects)\r\n        }\r\n    },\r\n    mounted: function () {\r\n        //console.info('User Logged')\r\n    },\r\n    beforeCreate(){\r\n        getAllEnterprises()\r\n            .then(async response => {\r\n                this.arrEmpresas = response.data\r\n                this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n            })\r\n    }\r\n}\r\n</script>"],"sourceRoot":"src/components/adminActions"}]}
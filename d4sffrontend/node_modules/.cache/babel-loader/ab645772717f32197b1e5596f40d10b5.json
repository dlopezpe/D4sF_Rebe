{"remainingRequest":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\src\\components\\adminActions\\ParcelsToCheckHasComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\src\\components\\adminActions\\ParcelsToCheckHasComponent.vue","mtime":1656402817390},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ParcelsToCheckHasComponent.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"bx--grid\">\r\n        <div id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Check las has de la parcela</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <cv-select\r\n                    theme=\"\"\r\n                    :label=\"$t('map.listado_empresas')\"\r\n                    :hide-label=\"false\"\r\n                    :inline=\"false\"\r\n                    :disabled=\"false\"\r\n                    @change=\"seleccionaEmpresa\"\r\n                    v-model=\"selectValueEmpresa\"\r\n                >\r\n                    <cv-select-option :value=\"''\" disabled selected hidden>{{$t(\"map.sel_empresa\")}}</cv-select-option>\r\n                    <cv-select-optgroup label=\"Todas las Empresas\">\r\n                        <cv-select-option :value=\"`all`\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in arrEmpresasList\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                    <cv-select-optgroup :label=\"`Cooperativa ${cooperativa.name}`\" v-bind:key=\"cooperativa.id\" v-for=\"cooperativa in arrCooperativas\">\r\n                        <cv-select-option :value=\"`coop_${cooperativa.id}`\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in cooperativa.enterprises\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                </cv-select>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <div id=\"sentinelLayersList\">\r\n                    <p style=\"font-size: 14px\">Selecciona a continuación las parcelas sobre las que quieres realizar la consulta. Puedes utilizar el buscador para encontrar la/s parcela/s que necesitas. Para poder ver el nombre de todas las parcelas, por favor utiliza el selector que encontrarás en la parte inferior de la tabla.</p>\r\n                    <br>\r\n                    <cv-data-table\r\n                        :sortable=\"false\"\r\n                        @pagination=\"actionOnPagination\"\r\n                        :pagination=\"{ \r\n                            numberOfItems: allParcelsOfEnterprisesFilter.length, \r\n                            pageSizes: [\r\n                                {\r\n                                    value: 10,\r\n                                    label: '10'\r\n                                }, \r\n                                {\r\n                                    value: 15,\r\n                                    label: '15'\r\n                                },\r\n                                {\r\n                                    value: 20,\r\n                                    label: '20'\r\n                                }, \r\n                                {\r\n                                    value: 25,\r\n                                    label: '25'\r\n                                }, \r\n                                {\r\n                                    value: allParcelsOfEnterprisesFilter.length,\r\n                                    label: 'Todas'\r\n                                }\r\n                            ] \r\n                        }\"\r\n                        :columns=\"[\r\n                            {\r\n                                key: 'name',\r\n                                label: this.$t('graficos.nombre'),\r\n                                'sortable': false\r\n                            },\r\n                            {\r\n                                key: 'description',\r\n                                label: this.$t('graficos.descrip'),\r\n                                'sortable': false\r\n                            },\r\n                            {\r\n                                key: 'Puntos',\r\n                                label: this.$t('graficos.puntos'),\r\n                                'sortable': false\r\n                            },\r\n                            {\r\n                                key: 'heactareas en BBDD',\r\n                                label: this.$t('graficos.hectareas'),\r\n                                'sortable': false\r\n                            },\r\n                            {\r\n                                key: 'heactareas Recalculadas',\r\n                                label: this.$t('graficos.hectareas'),\r\n                                'sortable': false\r\n                            },\r\n                            {\r\n                                key: 'enterprise',\r\n                                label: 'Empresa',\r\n                                'sortable': false\r\n                            },\r\n                        ]\"\r\n                        :title=\"$t('graficos.parcel_list')\"\r\n                        v-model=\"rowSelects\"\r\n                        ref=\"tableLstadoT2MultiCoop\"\r\n                        searchLabel=\"Filter\" searchPlaceholder=\"Filter\" searchClearLabel=\"Clear filter\"\r\n                    >\r\n                        <template v-if=\"true\" slot=\"actions\">\r\n                            <cv-search :placeholder=\"$t('graficos.buscar_nombre')\" @input=\"onBuscar\"></cv-search>\r\n                        </template>\r\n                        <template v-if=\"true\" slot=\"batch-actions\">\r\n                            <cv-button @click=\"comprobar\">\r\n                                Pruebas\r\n                            </cv-button>  \r\n                        </template>\r\n                        <template slot=\"data\">\r\n                            <cv-data-table-row\r\n                                v-for=\"feature in allParcelsOfEnterprisesFilter.slice(start, start+length)\"\r\n                                :key=\"`${feature.id}`\"\r\n                                :value=\"`${feature.id}`\"\r\n                                :aria-label-for-batch-checkbox=\"`Custom aria label for row ${feature.id} batch`\"\r\n                            >\r\n                                <cv-data-table-cell>{{feature.id+' - '}}{{feature.properties.name}}</cv-data-table-cell>\r\n                                <cv-data-table-cell>{{feature.properties.description}}</cv-data-table-cell>\r\n                                <cv-data-table-cell :class=\"{'errorDraw': getPuntos(feature.id) > 80}\" >{{getPuntos(feature.id)}}</cv-data-table-cell>\r\n                                <cv-data-table-cell>{{feature.properties.area.toFixed(2)}}</cv-data-table-cell>\r\n                                <cv-data-table-cell>{{getCalculateHas(feature.id)}} {{getCalculateHas(feature.id) != feature.properties.area.toFixed(2) ? '⚠' : ''}}</cv-data-table-cell>\r\n                                <cv-data-table-cell>{{getNameEnterprise(feature.properties.enterprise_id)}} </cv-data-table-cell>\r\n                            </cv-data-table-row>\r\n                        </template>\r\n                    </cv-data-table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport {getAllEnterprises, getEnterprise} from '@/crudFunctions/crudEnterprise'//getFechasSentinelForInformes\r\nimport {getCooperative} from '@/crudFunctions/crudCooperativas'\r\nimport { getArea } from 'ol/sphere';\r\nimport Feature from 'ol/Feature';\r\nimport Polygon from 'ol/geom/Polygon';\r\nexport default {\r\n    name: 'ParcelsToSentinelComponent',\r\n    components: {\r\n    },\r\n    data(){\r\n        return {\r\n            selectValueEmpresa: '',\r\n            //Empresas sel\r\n            arrEmpresas: [],\r\n            arrEmpresasList: [],\r\n            arrCooperativas: [],\r\n            allParcelsOfEnterprises: [],\r\n            allParcelsOfEnterprisesFilter: [],\r\n            start: 0,\r\n            length: 10,\r\n\r\n            rowSelects: [],\r\n            listadoParcelas: Array,\r\n            listadoParcelasFilter: Array,\r\n            rowSize: \"\",\r\n            autoWidth: false,\r\n            sortable: false,\r\n            title: \"Listado de parcelas sin Instancia en Sentinel\",\r\n            actionBarAriaLabel: \"Custom action bar aria label\",\r\n            batchCancelLabel: \"Cancel\",\r\n            zebra: true,\r\n            columns: [\r\n                {\r\n                    key: 'name',\r\n                    label: this.$t('graficos.nombre'),\r\n                },\r\n                {\r\n                    key: 'description',\r\n                    label: this.$t('graficos.descrip')\r\n                },\r\n                {\r\n                    key: 'heactareas',\r\n                    label: this.$t('graficos.hectareas'),\r\n                },\r\n                {\r\n                    key: 'enterprise',\r\n                    label: `Empresa`,\r\n                },\r\n            ],\r\n        }\r\n    },\r\n    methods: {\r\n        comprobar(){\r\n            console.info(this.rowSelects)\r\n            const result = this.allParcelsOfEnterprises.filter(parcel => this.rowSelects.includes(String(parcel.id)))\r\n            console.info(result)\r\n            console.info(result[0].geometry)\r\n            const feature = new Feature({\r\n                geometry: new Polygon(result[0].geometry.coordinates)\r\n            })\r\n            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857')\r\n            console.info(feature.getGeometry())\r\n            const areaForNewPolygon = (Math.round((getArea(feature.getGeometry())/ 10000) * 10000) / 10000)\r\n            console.info(areaForNewPolygon)\r\n        },\r\n        getCalculateHas(idParcel){\r\n            const result = this.allParcelsOfEnterprises.filter(parcel => idParcel == parcel.id)\r\n            const feature = new Feature({\r\n                geometry: new Polygon(result[0].geometry.coordinates)\r\n            })\r\n            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857')\r\n            return (Math.round((getArea(feature.getGeometry())/ 10000) * 10000) / 10000).toFixed(2)\r\n        }\r\n        ,\r\n        getPuntos(idParcel){\r\n            const result = this.allParcelsOfEnterprises.filter(parcel => idParcel == parcel.id)\r\n            const feature = new Feature({\r\n                geometry: new Polygon(result[0].geometry.coordinates)\r\n            })\r\n            feature.getGeometry().transform('EPSG:4326', 'EPSG:3857')\r\n            const poligono = feature.getGeometry();\r\n            //Dividimos entre 2 porque cada punto son 2 coordenadas\r\n            return poligono.flatCoordinates.length / 2 \r\n        },\r\n        getNameEnterprise(value){\r\n            const result = this.arrEmpresas.filter(enterprise => enterprise.id == value)\r\n            return result[0].name\r\n        },\r\n        actionOnPagination(ev){\r\n            this.start = ev.start-1\r\n            this.length = ev.length\r\n        },\r\n        onBuscar(busqueda){\r\n            if(busqueda){\r\n                const result = this.allParcelsOfEnterprises.filter(parcel => parcel.properties.name.toUpperCase().includes(busqueda.toUpperCase()))\r\n                this.allParcelsOfEnterprisesFilter = result\r\n            }else{\r\n                this.allParcelsOfEnterprisesFilter = this.allParcelsOfEnterprises\r\n            }\r\n        },\r\n        seleccionaEmpresa(empresa){\r\n            const arrParcels = []\r\n            if(empresa == 'all'){\r\n                getAllEnterprises()\r\n                    .then(async response => {\r\n                        response.data.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n            }else{\r\n                const result = empresa.split('_')\r\n                if(result[0] == 'coop'){\r\n                    getCooperative(result[1])\r\n                    .then(response => {\r\n                        response.data.enterprises.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data.enterprises\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }else{\r\n                    getEnterprise(empresa)\r\n                    .then(async response => {\r\n                        response.data.parcels.features.map(parcel => {\r\n                            arrParcels.push(parcel)\r\n                        })\r\n                        this.arrEmpresas = [response.data]\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }\r\n            }\r\n        },\r\n    },\r\n    mounted: function () {\r\n        //console.info('User Logged')\r\n    },\r\n    beforeCreate(){\r\n        getAllEnterprises()\r\n        .then(async response => {\r\n            this.arrEmpresas = response.data\r\n            this.arrEmpresasList = response.data\r\n            const arrParcels = []\r\n            response.data.map(enterprise => {\r\n                enterprise.parcels.features.map(parcel => {\r\n                    arrParcels.push(parcel)\r\n                })\r\n            })\r\n            this.allParcelsOfEnterprises = arrParcels\r\n            this.allParcelsOfEnterprisesFilter = arrParcels\r\n            this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n        })\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n    .errorDraw{\r\n        color: #da1e28;\r\n        font-weight: 400;\r\n    }\r\n</style>"],"sourceRoot":"src/components/adminActions"}]}
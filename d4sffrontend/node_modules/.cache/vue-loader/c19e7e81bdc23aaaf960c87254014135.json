{"remainingRequest":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\src\\components\\importParcels\\InportParcelsComponent.vue?vue&type=style&index=0&id=0da2889a&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\src\\components\\importParcels\\InportParcelsComponent.vue","mtime":1658391657409},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJ4LS1hY2NvcmRpb25fX2NvbnRlbnR7CiAgICBwYWRkaW5nLXJpZ2h0OiAwcHghaW1wb3J0YW50Owp9Cg=="},{"version":3,"sources":["InportParcelsComponent.vue"],"names":[],"mappingswiBA;AACA;AACA","file":"InportParcelsComponent.vue","sourceRoot":"src/components/importParcels","sourcesContent":["<template>\r\n    <div class=\"bx--grid\">\r\n        <br>\r\n        <div id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <h2>Importar Parcelas desde .zip <img src=\"../../assets/agriculture-analytics.svg\" style=\"width: 40px;\"></h2>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Para poder importar parcelas desde un .zip, este tiene que contener archivos con las extensiones xxx.dbf, xxx.prf, xxx.shp, xxx.shx</p>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\" style=\"margin-top: 20px;\">\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-select\r\n                    theme=\"\"\r\n                    :label=\"$t('map.listado_empresas')\"\r\n                    :hide-label=\"false\"\r\n                    :inline=\"false\"\r\n                    :disabled=\"false\"\r\n                    @change=\"seleccionaEmpresa\"\r\n                    v-model=\"selectValueEmpresa\"\r\n                >\r\n                    <cv-select-option :value=\"''\" disabled selected hidden>{{$t(\"map.sel_empresa\")}}</cv-select-option>\r\n                    <cv-select-optgroup label=\"Todas las Empresas\" v-if=\"is_superuser || is_systemadmin\">\r\n                        <cv-select-option :value=\"`all`\" v-if=\"is_superuser || is_systemadmin\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in arrEmpresasList\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                    <cv-select-optgroup :label=\"`Cooperativa ${cooperativa.name}`\" v-bind:key=\"cooperativa.id\" v-for=\"cooperativa in arrCooperativas\">\r\n                        <cv-select-option :value=\"`coop_${cooperativa.id}`\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in cooperativa.enterprises\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                </cv-select>\r\n            </div>\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-file-uploader\r\n                kind=\"\"\r\n                label=\"Subir Archivo\"\r\n                helperText=\"El formato permitido es .zip\"\r\n                :accept=\"['.zip']\"\r\n                :clear-on-reselect=\"false\"\r\n                :initial-state-uploading=\"false\"\r\n                :multiple=\"false\"\r\n                :removable=\"true\"\r\n                @change=\"onChangeFiles\"\r\n                remove-aria-label=\"Custom remove aria label\" ref=\"fileUploader\">\r\n                </cv-file-uploader>\r\n            </div>\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-button\r\n                    kind=\"primary\"\r\n                    :disabled=\"false\"\r\n                    @click=\"importarParcelas\"\r\n                >\r\n                    Subir archivo y ver resumen de importación\r\n                </cv-button>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Parcelas compatibles con Sentinel {{procesadas.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"procesadas\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n            <div class=\"bx--col\">\r\n                <p>Errores en Sentinel {{errores.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"errores\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n            <div class=\"bx--col\">\r\n                <p>Cambiadas con respecto a la importación anterior {{cambiadas.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"cambiadas\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Se van a importar {{totalParcelas}} Parcelas</p>\r\n                <cv-button\r\n                    kind=\"primary\"\r\n                    :disabled=\"totalParcelas ? false : true\"\r\n                    @click=\"importarParcelasConfirmar\">\r\n                    Confirmar importación\r\n                </cv-button>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <cv-modal\r\n            close-aria-label=\"Cerrar\"\r\n            size=\"large\"\r\n            :visible=\"visibleModal\"\r\n            @primary-click=\"actionPrimary\"\r\n            @modal-hidden=\"actionVisibleModal(false)\"\r\n            :auto-hide-off=\"false\">\r\n            <template v-if=\"true\" slot=\"title\">Selección de Parcelas</template>\r\n            <template v-if=\"false\" slot=\"title\">{{empresa.name}}</template>\r\n            <template v-if=\"true\" slot=\"content\" style=\"padding-right: 0%\">\r\n                <p>Selecciona a continuación las parcelas sobre las que quieres realizar la consulta. Puedes utilizar el buscador para encontrar la/s parcela/s que necesitas. Para poder ver el nombre de todas las parcelas, por favor utiliza el selector que encontrarás en la parte inferior de la tabla.</p>\r\n                <cv-data-table\r\n                :sortable=\"false\"\r\n                :pagination=\"{ \r\n                    numberOfItems: allParcelsOfEnterprisesFilter.length, \r\n                    pageSizes: [\r\n                        {\r\n                            value: 10,\r\n                            label: '10'\r\n                        }, \r\n                        {\r\n                            value: 15,\r\n                            label: '15'\r\n                        },\r\n                        {\r\n                            value: 20,\r\n                            label: '20'\r\n                        }, \r\n                        {\r\n                            value: 25,\r\n                            label: '25'\r\n                        }, \r\n                        {\r\n                            value: allParcelsOfEnterprisesFilter.length,\r\n                            label: 'Todas'\r\n                        }\r\n                    ] \r\n                }\" \r\n                @pagination=\"actionOnPagination\"\r\n                :columns=\"[\r\n                    {\r\n                        key: 'name',\r\n                        label: this.$t('graficos.nombre'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'description',\r\n                        label: this.$t('graficos.descrip'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'heactareas',\r\n                        label: this.$t('graficos.hectareas'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'enterprise',\r\n                        label: 'Empresa',\r\n                        'sortable': false\r\n                    },\r\n                ]\"\r\n                @sort=\"onSort\"\r\n                v-model=\"rowSelects\"\r\n                ref=\"tableLstadoT2MultiCoop\"\r\n                searchLabel=\"Filter\" searchPlaceholder=\"Filter\" searchClearLabel=\"Clear filter\"\r\n            >\r\n                <template v-if=\"true\" slot=\"actions\">\r\n                    <cv-search :placeholder=\"$t('graficos.buscar_nombre')\" @input=\"onBuscar\"></cv-search>\r\n                </template>\r\n                <template v-if=\"true\" slot=\"batch-actions\">\r\n                    <cv-button>\r\n                        \r\n                    </cv-button>  \r\n                </template>\r\n                <template slot=\"data\">\r\n                    <cv-data-table-row\r\n                        v-for=\"feature in allParcelsOfEnterprisesFilter.slice(start, start+length)\"\r\n                        :key=\"`${feature.id}`\"\r\n                        :value=\"`${feature.id}`\"\r\n                        :aria-label-for-batch-checkbox=\"`Custom aria label for row ${feature.id} batch`\"\r\n                    >\r\n                        <cv-data-table-cell>{{is_superuser ? feature.id+' - ' : ''}}{{feature.properties.name}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{feature.properties.description}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{feature.properties.area}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{getNameEnterprise(feature.properties.enterprise_id)}}</cv-data-table-cell>\r\n                    </cv-data-table-row>\r\n                </template>\r\n            </cv-data-table>\r\n            </template>\r\n            <template slot=\"primary-button\">Seleccionar</template>\r\n        </cv-modal>\r\n        <AlertaGeneral ref=\"alertaGenerall\" :tituloAlert=\"mensajeAlerta\" :tipoAlert=\"tipoAlerta\" />\r\n        <cv-loading\r\n            :active=\"isActiveLoading\"\r\n            :overlay=\"true\">\r\n        </cv-loading>\r\n\r\n    \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {getProfile, getPermisos} from '@/auth/index'\r\nimport {getAllEnterprises, getEnterprise} from '@/crudFunctions/crudEnterprise'//getFechasSentinelForInformes\r\nimport {getAllCooperatives, getCooperative} from '@/crudFunctions/crudCooperativas'\r\nimport {importParcelsFromFile} from '@/crudFunctions/crudEnterprise'\r\nimport AlertaGeneral from \"@/components/AlertaGeneral\";\r\nexport default {\r\n    name: 'Monitor',\r\n    components: {AlertaGeneral},\r\n    data(){\r\n        return {\r\n            isActiveLoading: false,\r\n            exportarExcel: false,\r\n            //\r\n            keyComponentMonitor: 0,\r\n            visibleModal: false,\r\n            data: {},\r\n            fechasArr: Array(),\r\n            //\r\n            selectValueEmpresa: '',\r\n            //\r\n            flagIndicatingDataHasBeenLoadedInVariables: false,\r\n            //Usuario\r\n            is_superuser: false,\r\n            is_staff: false,\r\n            is_systemadmin: false,\r\n            is_enterpriseadmin: false,\r\n            is_coop_user: false,\r\n            //Empresas sel\r\n            arrEmpresas: [],\r\n            arrEmpresasList: [],\r\n            arrCooperativas: [],\r\n            allParcelsOfEnterprises: [],\r\n            allParcelsOfEnterprisesFilter: [],\r\n            //\r\n            start: 0,\r\n            length: 10,\r\n            //\r\n            rowSelects: [],\r\n            selectValueCapa: '',\r\n            //\r\n            SentinelLayer: 'NDVI',\r\n            calOptions: {\r\n                \"dateFormat\": \"Y-m-d\"\r\n            },\r\n            time: ``,\r\n            valueDates: [],\r\n            valueRange: [],\r\n            timeValuesArr: [],\r\n            nombreInforme: `Gráfico - ${this.getNow()}`,\r\n            checked_clouds: false,\r\n            //\r\n            tipoAlerta: `error`,\r\n            mensajeAlerta: '',\r\n            //\r\n            fechasParcelasNumImages: {},\r\n            verCargandoImagenes: false,\r\n            //\r\n            disabledGenerar: false,\r\n            //\r\n            verErrorIntervalo: false,\r\n            verCargandoFechasBbox: false,\r\n            //\r\n            initialStep: 1,\r\n            steps: [\r\n                \"Nombre de informe y Selección de Parcelas\",\r\n                \"Selección de capas y Nubes\",\r\n                \"Selección de Fechas\",\r\n                \"Resumen de Informe\",\r\n            ],\r\n            open: [false, false, false, false],\r\n            verTimeoutNumImg: false,\r\n            //\r\n            file: null,\r\n            procesadas: [],\r\n            errores: [],\r\n            cambiadas: [],\r\n            totalParcelas: 0\r\n        }\r\n    },\r\n    methods: {\r\n        actionVisibleModal(action){\r\n            this.visibleModal = action\r\n        },\r\n        \r\n        onChangeFiles(file){\r\n            this.file = file\r\n        },\r\n        importarParcelas(){\r\n            if(!this.file){\r\n                console.info('No hay archivo')\r\n                this.mensajeAlerta = `Debe seleccionar un archivo`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            if(!this.selectValueEmpresa){\r\n                console.info('No hay empresa')\r\n                this.mensajeAlerta = `Debe seleccionar una empresa`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            console.info('Importando parcelas')\r\n            this.isActiveLoading = true\r\n            importParcelsFromFile(this.file[0].file, this.selectValueEmpresa, false)\r\n            .then(response => {\r\n                this.isActiveLoading = false\r\n                console.info(response.data)\r\n                const formattedProcesadas = []\r\n                response.data.procesadas.map(item => {\r\n                    formattedProcesadas.push([item])\r\n                })\r\n                const formattedErrores = []\r\n                response.data.Overlaps.map(item => {\r\n                    formattedErrores.push([item])\r\n                })\r\n                const formattedCambiadas = []\r\n                response.data.cambiadas.map(item => {\r\n                    formattedCambiadas.push([item])\r\n                })\r\n                this.procesadas = formattedProcesadas\r\n                this.errores = formattedErrores\r\n                this.totalParcelas = response.data.totalparcelas\r\n                this.cambiadas = formattedCambiadas\r\n\r\n            })\r\n            .catch(error => {\r\n                this.isActiveLoading = false\r\n                console.error(error)\r\n                this.mensajeAlerta = `Error al importar parcelas`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n            })\r\n        },\r\n\r\n        importarParcelasConfirmar(){\r\n            if(!this.file){\r\n                console.info('No hay archivo')\r\n                this.mensajeAlerta = `Debe seleccionar un archivo`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            if(!this.selectValueEmpresa){\r\n                console.info('No hay empresa')\r\n                this.mensajeAlerta = `Debe seleccionar una empresa`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            console.info('Importando parcelas')\r\n            this.isActiveLoading = true\r\n            importParcelsFromFile(this.file[0].file, this.selectValueEmpresa, true)\r\n            .then(() => {\r\n                this.isActiveLoading = false\r\n                this.mensajeAlerta = `Parcelas importadas correctamente`\r\n                this.tipoAlerta = `success`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n\r\n            })\r\n            .catch(error => {\r\n                this.isActiveLoading = false\r\n                console.error(error)\r\n                this.mensajeAlerta = `Error al importar parcelas`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n            })\r\n        },\r\n        \r\n        seleccionaEmpresa(empresa){\r\n            const arrParcels = []\r\n            if(empresa == 'all'){\r\n                getAllEnterprises()\r\n                    .then(async response => {\r\n                        response.data.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n            }else{\r\n                const result = empresa.split('_')\r\n                if(result[0] == 'coop'){\r\n                    getCooperative(result[1])\r\n                    .then(response => {\r\n                        response.data.enterprises.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data.enterprises\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }else{\r\n                    getEnterprise(empresa)\r\n                    .then(async response => {\r\n                        response.data.parcels.features.map(parcel => {\r\n                            arrParcels.push(parcel)\r\n                        })\r\n                        this.arrEmpresas = [response.data]\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        getNow() {\r\n            const today = new Date();\r\n            const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n            //const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n            //const dateTime = date +' '+ time;\r\n            //this.timestamp = dateTime;\r\n            //console.info(dateTime)\r\n            return date\r\n        },\r\n        getNameEnterprise(value){\r\n            const result = this.arrEmpresas.filter(enterprise => enterprise.id == value)\r\n            return result[0].name\r\n        },\r\n        onBuscar(busqueda){\r\n            if(busqueda){\r\n                const result = this.allParcelsOfEnterprises.filter(parcel => parcel.properties.name.toUpperCase().includes(busqueda.toUpperCase()))\r\n                this.allParcelsOfEnterprisesFilter = result\r\n            }else{\r\n                this.allParcelsOfEnterprisesFilter = this.allParcelsOfEnterprises\r\n            }\r\n        },\r\n        actionOnPagination(ev){\r\n            this.start = ev.start-1\r\n            this.length = ev.length\r\n        },\r\n        onSort(order) {\r\n            const index = order.index\r\n            let column = ``\r\n            const orden = order.order\r\n            \r\n            switch (index) {\r\n                case '0':\r\n                    column = `name`\r\n                    break\r\n                case '1':\r\n                    column = `name`\r\n                    break\r\n                case '2':\r\n                    column = 'area'\r\n                    break\r\n                case '3':\r\n                    column = 'enterprise'\r\n                    break\r\n                default:\r\n                    column = `name`\r\n            }\r\n            if(orden == 'ascending'){\r\n                this.allParcelsOfEnterprisesFilter.sort((a, b) => parseFloat(a.name) - parseFloat(b.name));\r\n            }\r\n            console.info(column)\r\n        },\r\n    },\r\n    mounted: function () {\r\n        //console.info(this.$refs.acc)\r\n        this.getNow()\r\n        //console.info('User Logged')\r\n    },\r\n    beforeCreate(){\r\n        getProfile()\r\n        .then(response => {\r\n            const user = response.data[0]\r\n            getPermisos(response.data[0].user)\r\n            .then(response => {\r\n                this.is_superuser = response.data.is_superuser\r\n                this.is_staff = response.data.is_staff\r\n                this.is_systemadmin = response.data.is_systemadmin\r\n                this.is_enterpriseadmin = response.data.is_enterpriseadmin\r\n                this.is_coop_user = user.cooperative_user\r\n                /*\r\n                //*Obtenemos la empresa del usuario\r\n                const enterprise_id = user.enterprise_id\r\n                getEnterprise(enterprise_id)\r\n                .then(async response => {\r\n                    this.parcelas = response.data.parcels\r\n                    await this.arrEmpresas.push(response.data)\r\n                    this.flagIndicatingDataHasBeenLoadedInVariables = false\r\n                    this.timestamp()\r\n                })\r\n                */\r\n                \r\n                if(this.is_superuser || this.is_systemadmin){\r\n                    //console.info('entra')\r\n                    getAllEnterprises()\r\n                    .then(async response => {\r\n                        this.arrEmpresas = response.data\r\n                        this.arrEmpresasList = response.data\r\n                        const arrParcels = []\r\n                        response.data.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }else if((this.is_enterpriseadmin || this.is_staff) && !this.is_coop_user){ \r\n                    getEnterprise(user.enterprise_id)\r\n                    .then(async response => {\r\n                        this.arrEmpresas = [response.data]\r\n                        this.arrEmpresasList = [response.data]\r\n                        const arrParcels = []\r\n                        response.data.parcels.features.map(parcel => {\r\n                            arrParcels.push(parcel)\r\n                        })\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }else if(this.is_coop_user){\r\n                    getCooperative(user.enterprise_id)\r\n                    .then(response => {\r\n                        this.arrCooperativas = [response.data]\r\n                        //this.arrEmpresas = response.data.enterprises\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }\r\n\r\n                if(this.is_superuser || this.is_systemadmin){\r\n                    getAllCooperatives()\r\n                    .then(async response => {\r\n                        this.arrCooperativas = response.data\r\n                    })\r\n                }\r\n                this.isActiveLoading = false\r\n                this.isVisibleLoad = false\r\n            })\r\n        })\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n    .bx--accordion__content{\r\n        padding-right: 0px!important;\r\n    }\r\n</style>"]}]}
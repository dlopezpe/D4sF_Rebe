{"remainingRequest":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\src\\components\\adminActions\\GenGraficosAnterioresComponent.vue?vue&type=template&id=42242fda&","dependencies":[{"path":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\src\\components\\adminActions\\GenGraficosAnterioresComponent.vue","mtime":1651136517247},{"path":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\dataforsmartfarming\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
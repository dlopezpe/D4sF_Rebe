{"remainingRequest":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\@carbon\\vue\\src\\components\\cv-grid\\cv-column.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\@carbon\\vue\\src\\components\\cv-grid\\cv-column.vue","mtime":1681731164994},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681731147886},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1681731147886},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1681731156386},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681731147886},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1681731148945}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBjYXJib25QcmVmaXhNaXhpbiBmcm9tICcuLi8uLi9taXhpbnMvY2FyYm9uLXByZWZpeC1taXhpbic7Cgpjb25zdCBicmVha3BvaW50UHJvcCA9IHsKICB0eXBlOiBbQm9vbGVhbiwgTnVtYmVyLCBPYmplY3RdLAogIHZhbGlkYXRvcjogdmFsdWUgPT4gewogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgcmV0dXJuICdzcGFuJyBpbiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3BhbiA9PT0gJ251bWJlcicgJiYgJ29mZnNldCcgaW4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm9mZnNldCA9PT0gJ251bWJlcic7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0sCn07CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0N2Q29sdW1uJywKICBtaXhpbnM6IFtjYXJib25QcmVmaXhNaXhpbl0sCiAgcHJvcHM6IHsKICAgIHNtOiBicmVha3BvaW50UHJvcCwKICAgIG1kOiBicmVha3BvaW50UHJvcCwKICAgIGxnOiBicmVha3BvaW50UHJvcCwKICAgIHhsZzogYnJlYWtwb2ludFByb3AsCiAgICBtYXg6IGJyZWFrcG9pbnRQcm9wLAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGNsYXNzZXMoKSB7CiAgICAgIGNvbnN0IGNsYXNzbmFtZXMgPSBbXTsKCiAgICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gWwogICAgICAgIHsgbmFtZTogJ3NtJywgdmFsdWU6IHRoaXMuc20gfSwKICAgICAgICB7IG5hbWU6ICdtZCcsIHZhbHVlOiB0aGlzLm1kIH0sCiAgICAgICAgeyBuYW1lOiAnbGcnLCB2YWx1ZTogdGhpcy5sZyB9LAogICAgICAgIHsgbmFtZTogJ3hsZycsIHZhbHVlOiB0aGlzLnhsZyB9LAogICAgICAgIHsgbmFtZTogJ21heCcsIHZhbHVlOiB0aGlzLm1heCB9LAogICAgICBdLmZpbHRlcihicmVha3BvaW50ID0+IGJyZWFrcG9pbnQudmFsdWUgIT09IGZhbHNlKTsKCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnJlYWtwb2ludHMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBicmVha3BvaW50c1tpXTsKCiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7CiAgICAgICAgICAvLyBhdXRvLWNvbHVtbgogICAgICAgICAgY2xhc3NuYW1lcy5wdXNoKGAke3RoaXMuY2FyYm9uUHJlZml4fS0tY29sLSR7bmFtZX1gKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgICAgICAgIGNsYXNzbmFtZXMucHVzaChgJHt0aGlzLmNhcmJvblByZWZpeH0tLWNvbC0ke25hbWV9LSR7dmFsdWV9YCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnN0IHsgc3Bhbiwgb2Zmc2V0IH0gPSB2YWx1ZTsKCiAgICAgICAgICBpZiAodHlwZW9mIHNwYW4gPT09ICdib29sZWFuJykgewogICAgICAgICAgICBjbGFzc25hbWVzLnB1c2goYCR7dGhpcy5jYXJib25QcmVmaXh9LS1jb2wtJHtuYW1lfWApOwogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhbiA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgY2xhc3NuYW1lcy5wdXNoKGAke3RoaXMuY2FyYm9uUHJlZml4fS0tY29sLSR7bmFtZX0tJHtzcGFufWApOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykgewogICAgICAgICAgICBjbGFzc25hbWVzLnB1c2goYCR7dGhpcy5jYXJib25QcmVmaXh9LS1vZmZzZXQtJHtuYW1lfS0ke29mZnNldH1gKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChjbGFzc25hbWVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIC8vIG5vIGJyZWFrcG9pbnRzIHdlcmUgZGVmaW5lZC4gdXNlIGF1dG8tY29sdW1uCiAgICAgICAgY2xhc3NuYW1lcy5wdXNoKGAke3RoaXMuY2FyYm9uUHJlZml4fS0tY29sYCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjbGFzc25hbWVzOwogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["cv-column.vue"],"names":[],"mappings":";AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"cv-column.vue","sourceRoot":"node_modules/@carbon/vue/src/components/cv-grid","sourcesContent":["<template>\n  <div class=\"cv-column\" :class=\"classes\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport carbonPrefixMixin from '../../mixins/carbon-prefix-mixin';\n\nconst breakpointProp = {\n  type: [Boolean, Number, Object],\n  validator: value => {\n    if (typeof value === 'number' || typeof value === 'boolean') {\n      return true;\n    } else if (typeof value === 'object') {\n      return 'span' in value && typeof value.span === 'number' && 'offset' in value && typeof value.offset === 'number';\n    }\n\n    return false;\n  },\n};\n\nexport default {\n  name: 'CvColumn',\n  mixins: [carbonPrefixMixin],\n  props: {\n    sm: breakpointProp,\n    md: breakpointProp,\n    lg: breakpointProp,\n    xlg: breakpointProp,\n    max: breakpointProp,\n  },\n  computed: {\n    classes() {\n      const classnames = [];\n\n      const breakpoints = [\n        { name: 'sm', value: this.sm },\n        { name: 'md', value: this.md },\n        { name: 'lg', value: this.lg },\n        { name: 'xlg', value: this.xlg },\n        { name: 'max', value: this.max },\n      ].filter(breakpoint => breakpoint.value !== false);\n\n      for (let i = 0; i < breakpoints.length; i += 1) {\n        const { name, value } = breakpoints[i];\n\n        if (typeof value === 'boolean') {\n          // auto-column\n          classnames.push(`${this.carbonPrefix}--col-${name}`);\n        } else if (typeof value === 'number') {\n          classnames.push(`${this.carbonPrefix}--col-${name}-${value}`);\n        } else {\n          const { span, offset } = value;\n\n          if (typeof span === 'boolean') {\n            classnames.push(`${this.carbonPrefix}--col-${name}`);\n          } else if (typeof span === 'number') {\n            classnames.push(`${this.carbonPrefix}--col-${name}-${span}`);\n          }\n\n          if (typeof offset === 'number') {\n            classnames.push(`${this.carbonPrefix}--offset-${name}-${offset}`);\n          }\n        }\n      }\n\n      if (classnames.length === 0) {\n        // no breakpoints were defined. use auto-column\n        classnames.push(`${this.carbonPrefix}--col`);\n      }\n\n      return classnames;\n    },\n  },\n};\n</script>\n"]}]}
{"remainingRequest":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\EditarParcel2.vue?vue&type=style&index=0&id=746b2e0e&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\EditarParcel2.vue","mtime":1709559544848},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAgICNkaXZfYnVzY2Fkb3J7CiAgICAgICAgd2lkdGg6IDUwdnc7CiAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgIHBhZGRpbmc6IDEwcHg7CiAgICAgICAgbWFyZ2luLXRvcDogNHB4OwogICAgICAgIG1hcmdpbi1sZWZ0OiA0MHB4OwogICAgICAgIHRvcDogNzlweDsKCiAgICB9CiAgICAuYngtLW1vZGFsLWNvbnRhaW5lcnsKICAgICAgICB3aWR0aDogOTglOwogICAgICAgIGhlaWdodDogOTUlOwogICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7CiAgICB9CiAgICAuZXJyb3JEcmF3ewogICAgICAgIGNvbG9yOiAjZGExZTI4OwogICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgZm9udC1zaXplOiAxMnB4OwogICAgfQogICAgI3Jvd19ib3gsICNyb3dfYm94ID5kaXZ7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgfQogICAgI2Rpdl9tYXB7CiAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIAogICAgfQogICAgLm1hcGF7CiAgICAgICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgfQogICAgI3NlbnRpbmVsTGF5ZXJzTGlzdHsKICAgICAgICBvdmVyZmxvdzogc2Nyb2xsOwogICAgICAgIGhlaWdodDogNTQwcHg7CiAgICB9CiAgICAucGFjLWNvbnRhaW5lcnsKICAgICAgICB6LWluZGV4OiAxMDAwMCFpbXBvcnRhbnQ7CiAgICB9CiAgICBAbWVkaWEgKG1pbi13aWR0aDogNDJyZW0pewogICAgICAgIC5ieC0tbW9kYWwtY29udGFpbmVyLS1sZyB7CiAgICB3aWR0aDogOTYlICFpbXBvcnRhbnQ7Cn0KICAgIH0KCg=="},{"version":3,"sources":["EditarParcel2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAu+BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditarParcel2.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n    <!-- desactivar AutoHide = ponerlo a false\r\n        activar Autohide = ponerlo a true -->\r\n        <cv-modal\r\n            :close-aria-label=\"closeAriaLabel\"\r\n            size='large'\r\n            :primary-button-disabled=\"primaryButtonDisabled\"\r\n            :auto-hide-off='autoHideOff'\r\n            @modal-shown=\"actionShownMap\"\r\n            ref=\"editarRolForm\" id=\"parcelModal\" class=\"parcelModalClass\"\r\n        >\r\n            <!-- <div slot=\"content\" @mouseover=\"deactivateAutoHide\" @mouseout=\"activateAutoHide\"> -->\r\n        <!--auto-hide-off: para evitar que se cierre el modal de ninguna forma\r\n            @modal-hidden: para que haga una acción justo cuando se sale del modal-->\r\n\r\n            <template v-if=\"use_label\" slot=\"label\"><div id=\"targetClose\" @mouseenter=\"cerrarModal\">{{ title_card }}</div></template>\r\n            <template v-if=\"use_title\" slot=\"title\">{{ subtitle_card }} {{ userSeleccionado }}</template>\r\n            <template v-if=\"use_content\" slot=\"content\" id=\"contenido\" v-modal=\"\">\r\n                <div class=\"bx--row\" id=\"row_box\">\r\n                    <div class=\"bx--col-lg-3 bx--col-md-3 bx--col-sm-3\">\r\n                        <cv-text-input\r\n                        :label=\"$t('parcelas.parcel_name')\"\r\n                        :value=\"valueName\"\r\n                        :disabled=\"disabledName\"\r\n                        :type=\"inputTypeName\"\r\n                        :placeholder=\"$t('parcelas.place_name')\"\r\n                        :invalid-message=\"invalidMessageName\"\r\n                        ref=\"inputName\"\r\n                        id=\"input-MIRLwtCq\"\r\n                        v-model=\"valueName\"></cv-text-input>\r\n                        <br/>\r\n                        <cv-text-input\r\n                            :label=\"$t('parcelas.parcel_descrip')\"\r\n                            :value=\"valueDesc\"\r\n                            :disabled=\"disabledDesc\"\r\n                            :type=\"inputTypeDesc\"\r\n                            :placeholder=\"$t('parcelas.place_descrip')\"\r\n                            :invalid-message=\"invalidMessageDesc\"\r\n                            ref=\"inputDesc\"\r\n                            id=\"input-3zcRveTf\"\r\n                            v-model=\"valueDesc\"\r\n                        ></cv-text-input>\r\n                        <br />\r\n                        <div class=\"errorDraw\" v-if=\"verErrorDraw\">{{errorDraw}}</div>\r\n                        <br />\r\n                            <cv-button\r\n                                :kind=\"kindSave\"\r\n                                :size=\"sizeSave\"\r\n                                :disabled=\"disabledSave\"\r\n                                @click=\"actionPrimary\"\r\n                                :icon=\"icon\"\r\n                            >\r\n                            {{$t(\"parcelas.guardar\")}}\r\n                            </cv-button>\r\n                        <br/>\r\n                        <br>\r\n                        <div id=\"geolocIcon\" style=\"\">\r\n                            <div v-if=\"mostrarIconErrGeoloc === ''\" @click=\"cargaLocalizacionActual()\">\r\n                                <p style=\"cursor: pointer; font-size: 14px;\">Mostrar mi ubicación <img src=\"../assets/airport-location.svg\" style=\"width: 14px; height: 14px;\"></p>\r\n                            </div>\r\n                            <div v-else-if=\"mostrarIconErrGeoloc === false\" @click=\"cargaLocalizacionActual()\">\r\n                                <p style=\"cursor: pointer; font-size: 14px;\">Para volver a localizar mi ubicación, haz click aquí <Location16 style=\"stroke: #00abff; width: 14px; height: 14px; fill: #00abff;\"/></p>\r\n                            </div>\r\n                            <div v-else-if=\"mostrarIconErrGeoloc === true\" @click=\"cargaLocalizacionActual()\">\r\n                                <p style=\"cursor: pointer; font-size: 14px;\">No temenos acceso a tu ubicación <img src=\"../assets/location--hazard.svg\" style=\"width: 14px; height: 14px;\"></p>\r\n                            </div>\r\n                        </div>\r\n                        <br>\r\n                        <div id=\"sentinelLayersList\">\r\n                            <cv-tabs\r\n                            :container=\"false\"\r\n                            aria-label=\"navigation tab label\">\r\n                                <cv-tab id=\"tab-1\" :label=\"$t('parcelas.parcel_list')\">\r\n                                    <cv-structured-list selectable id=\"parcelList\">\r\n                                        <template slot=\"items\">\r\n                                            <cv-structured-list-item \r\n                                            v-for=\"feature in allParcels\" \r\n                                            name=\"group-1\" \r\n                                            :value=\"feature.id\" \r\n                                            v-bind:key=\"feature.id\" \r\n                                            :checked=\"feature.id == selectedParcelList\"\r\n                                            @change=\"actionChangeParcels\"\r\n                                            ref=\"listaDeParcelas\">\r\n                                                <cv-structured-list-data>{{feature.properties.name}}</cv-structured-list-data>\r\n                                            </cv-structured-list-item>\r\n                                        </template>\r\n                                    </cv-structured-list>\r\n                                </cv-tab>\r\n                                <cv-tab id=\"tab-2\" :label=\"$t('parcelas.sigpac_pro')\" :selected=\"selected\">\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder.sync=\"placeholderComunidad\" \r\n                                        @change=\"actionChangeComunidades\" :label=\"labelComunidad\" ref=\"comunidadesSelect\">\r\n                                            <cv-dropdown-item v-for=\"comunidad in comunidades\" :value=\"comunidad.properties.codigo\" v-bind:key=\"comunidad.properties.codigo\">{{comunidad.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderProv\" \r\n                                        @change=\"actionChangeProv\" :label=\"labelProv\" :disabled=\"!visibleProv\" ref=\"provinciasSelect\">\r\n                                            <cv-dropdown-item v-for=\"provincia in provincias\" :value=\"provincia.properties.codigo\" v-bind:key=\"provincia.properties.codigo\">{{provincia.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderMun\" \r\n                                        @change=\"actionChangeMun\" :label=\"labelMun\" :disabled=\"!visibleMun\" ref=\"munSelect\">\r\n                                            <cv-dropdown-item v-for=\"municipio in municipios\" :value=\"municipio.properties.codigo\" v-bind:key=\"municipio.properties.codigo\">{{municipio.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderAgre\" \r\n                                        @change=\"actionChangeAgre\" :label=\"labelAgre\" :disabled=\"!visibleAgre\" ref=\"agreSelect\">\r\n                                            <cv-dropdown-item v-for=\"agregado in agregados\" :value=\"agregado\" v-bind:key=\"agregado\">{{agregado}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderZona\" \r\n                                        @change=\"actionChangeZona\" :label=\"labelZona\" :disabled=\"!visibleZona\" ref=\"zonaSelect\">\r\n                                            <cv-dropdown-item v-for=\"zona in zonas\" :value=\"zona\" v-bind:key=\"zona\">{{zona}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderPol\" \r\n                                        @change=\"actionChangePol\" :label=\"labelPol\" :disabled=\"!visiblePol\" ref=\"polSelect\">\r\n                                            <cv-dropdown-item v-for=\"poligono in poligonos\" :value=\"poligono.properties.codigo\" v-bind:key=\"poligono.properties.codigo\">{{poligono.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderPar\" \r\n                                        @change=\"actionChangePar\" :label=\"labelPar\" :disabled=\"!visiblePar\" ref=\"parSelect\">\r\n                                            <cv-dropdown-item v-for=\"parcela in parcelas\" :value=\"parcela.properties.dn_pk\" v-bind:key=\"parcela.properties.dn_pk\">{{parcela.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                    <br>\r\n                                    <cv-dropdown \r\n                                        :placeholder=\"placeholderRec\" \r\n                                        @change=\"actionChangeRec\" :label=\"labelRec\" :disabled=\"!visibleRec\" ref=\"recSelect\">\r\n                                            <cv-dropdown-item v-for=\"recinto in recintos\" :value=\"recinto.properties.dn_pk\" v-bind:key=\"recinto.properties.dn_pk\">{{recinto.properties.nombre}}</cv-dropdown-item>\r\n                                    </cv-dropdown>\r\n                                </cv-tab>\r\n                                <cv-tab id=\"tab-3\" :label=\"$t('parcelas.sigpac_direc')\">\r\n                                    <div class=\"errorDraw\" v-if=\"verErrorBusq\">{{$t(\"parcelas.sigpac_error\")}}</div>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderProv\" v-model=\"vProv\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderMun\" v-model=\"vMun\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderAgre\" v-model=\"vAgre\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderZona\" v-model=\"vZona\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderPol\" v-model=\"vPol\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderPar\" v-model=\"vPar\">\r\n                                    </cv-number-input>\r\n                                    <cv-number-input\r\n                                    :label=\"placeholderRec\" v-model=\"vRec\">\r\n                                    </cv-number-input>\r\n                                    <cv-button kind=\"primary\" @click=\"bucardorSigpacDirect\">\r\n                                    {{$t(\"parcelas.buscar\")}}\r\n                                    </cv-button>\r\n                                </cv-tab>\r\n                            </cv-tabs>\r\n                                \r\n                        </div>\r\n                    </div>\r\n                    <div class=\"bx--col-lg  bx--col-md bx--col-sm\">\r\n                        \r\n                        <div id=\"div_map\">\r\n                            <vl-map\r\n                                :load-tiles-while-animating=\"true\"\r\n                                :load-tiles-while-interacting=\"true\"\r\n                                data-projection=\"EPSG:4326\"\r\n                                :id=\"parcel.id\"\r\n                                class=\"mapa\"\r\n                                ref=\"map\"\r\n                            >\r\n                                <vl-view :zoom.sync=\"zoom\" :center=\"center\"></vl-view>      \r\n                                <!--Bing MAP -->    \r\n                        <!--Bing MAP -->    \r\n                                <!--Bing MAP -->    \r\n                                <vl-layer-tile id=\"bingmaps\">\r\n                                    <vl-source-bingmaps :api-key=\"apiKeyBing\" :imagery-set=\"imagerySetBing\" :maxZoom=\"maxZoomBing\"></vl-source-bingmaps>\r\n                                </vl-layer-tile>\r\n                                <!--todas las parcelas-->\r\n                                <vl-layer-vector>\r\n                                    <vl-source-vector>\r\n                                        <vl-feature v-for=\"parcel in allParcels\" :value=\"parcel.id\" v-bind:key=\"parcel.id\">\r\n                                            <vl-geom-polygon :coordinates=\"parcel.geometry.coordinates\" :indent=\"parcel.id\" :ref=\"parcel.id+'parcela'\"></vl-geom-polygon>\r\n                                            <vl-style-box>\r\n                                                <vl-style-stroke color=\"rgba(0, 0, 255, 1)\" :width=\"2\"></vl-style-stroke>\r\n                                                <vl-style-fill color=\"rgba(255,255,255,0.0)\"></vl-style-fill>\r\n                                                <vl-style-text :text=\"parcel.properties.name+'\\n'+parcel.properties.area.toFixed(2)+'Ha' +'/'+metricaparcela(parcel.properties.area)+'Acre'\" font=\"14px IBM Plex Sans\">\r\n                                                    <vl-style-fill color=\"white\"></vl-style-fill>\r\n                                                    <vl-style-stroke color=\"black\" :width=\"3\"></vl-style-stroke>\r\n                                                </vl-style-text>\r\n                                            </vl-style-box>\r\n                                        </vl-feature>\r\n                                    </vl-source-vector>\r\n                                </vl-layer-vector>\r\n                                <!-- Parcela -->\r\n                                <vl-layer-vector>\r\n                                    <vl-source-vector ident=\"drawTarget\" :features.sync=\"featuress\">\r\n                                        <vl-feature>\r\n                                            <vl-geom-polygon :coordinates=\"coordenadasParcel\" indent=\"poligono\" ref=\"parcela\"></vl-geom-polygon>\r\n                                            <vl-style-box>\r\n                                                <vl-style-stroke :color=\"colorParcela\" :width=\"3\"></vl-style-stroke>\r\n                                                <vl-style-fill color=\"rgba(255,255,255,0.5)\"></vl-style-fill>\r\n                                                <vl-style-text :text=\"valueName+'\\n'+metric + metricName\"></vl-style-text>\r\n                                            </vl-style-box>\r\n                                        </vl-feature>\r\n                                    </vl-source-vector>\r\n                                </vl-layer-vector>\r\n                                <vl-interaction-draw source=\"drawTarget\" type=\"Polygon\" v-if=\"dibujaPoligono\" @drawend=\"terminado\" :key.sync=\"refreshDibujo\" >\r\n                                    \r\n                                </vl-interaction-draw>\r\n                                <vl-interaction-modify source=\"drawTarget\" v-if=\"ModificaPoligono\" @modifyend=\"editado\">\r\n                                    \r\n                                </vl-interaction-modify>\r\n                                <!--<vl-interaction-snap source=\"drawTarget\" :priority=\"10\"></vl-interaction-snap>-->\r\n                                <vl-feature>\r\n                                    <vl-geom-point :coordinates.sync=\"coordenadasPunto\"></vl-geom-point>\r\n                                    <vl-style-box>\r\n                                        <vl-style-icon src=\"https://d4smartfarming.smartbits-es.com/imgMail/icono-mapa.png\"></vl-style-icon>\r\n                                    </vl-style-box>\r\n                                </vl-feature>\r\n\r\n                                \r\n                            </vl-map>\r\n                            <div id=\"div_buscador\">\r\n                                <gmap-autocomplete @place_changed=\"setPlace\"  class=\"form-control bx--text-input\" :placeholder=\"$t('parcelas.ubicacion')\" style=\"width: 100%\">\r\n                                </gmap-autocomplete>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n            </template>\r\n\r\n            <template v-if=\"false\" slot=\"primary-button\" v-bind:disabled=\"true\">{{$t(\"parcelas.guardar\")}}</template>\r\n\r\n        </cv-modal>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\nimport proj4 from 'proj4'\r\nimport { getArea } from 'ol/sphere';\r\nimport {getComunidades,getProvincias,getMunicipios,getAgregados,getZonas,getPoligonos,getParcelas,getRecintos,getDirect} from '@/crudFunctions/crudSigpac'\r\nexport default {\r\n    name: \"EditarParcel2\",\r\n    props: {\r\n        userSeleccionado: String\r\n    },\r\n    data () {\r\n        return{\r\n            erorCompaGeoloc: '',\r\n            mostrarIconErrGeoloc: '',\r\n            metricName: 'Ha',\r\n            //SIGPAC DIRECTO\r\n            vProv: '',\r\n            vMun: '',\r\n            vAgre: '',\r\n            vZona: '',\r\n            vPol: '',\r\n            vPar: '',\r\n            vRec: '',\r\n            verErrorBusq: false,\r\n            //SIGPPAC CONFIGURATION\r\n            placeholderComunidad: this.$t('parcelas.comunidad'),\r\n            labelComunidad: this.$t('parcelas.comunidad_sel'),\r\n            comunidades: Array,\r\n            \r\n            visibleProv: false,\r\n            placeholderProv: this.$t('parcelas.provincia'),\r\n            labelProv: this.$t('parcelas.provincia_sel'),\r\n            provincias: Array,\r\n            provinciaSel: 0,\r\n\r\n            visibleMun: false,\r\n            placeholderMun: this.$t('parcelas.municipio'),\r\n            labelMun: this.$t('parcelas.municipio_sel'),\r\n            municipios: Array,\r\n            municipioSel: 0,\r\n\r\n            visibleAgre: false,\r\n            placeholderAgre: this.$t('parcelas.agregado'),\r\n            labelAgre: this.$t('parcelas.agregado_sel'),\r\n            agregados: Array,\r\n            agregadoSel: 0,\r\n\r\n            visibleZona: false,\r\n            placeholderZona: this.$t('parcelas.zona'),\r\n            labelZona: this.$t('parcelas.zona_sel'),\r\n            zonas: Array,\r\n            zonaSel: 0,\r\n\r\n            visiblePol: false,\r\n            placeholderPol: this.$t('parcelas.poligono'),\r\n            labelPol: this.$t('parcelas.poligono_sel'),\r\n            poligonos: Array,\r\n            poligonoSel: 0,\r\n\r\n            visiblePar: false,\r\n            placeholderPar: this.$t('parcelas.parcela'),\r\n            labelPar: this.$t('parcelas.parcela_sel'),\r\n            parcelas: Array,\r\n            parcelaSel: 0,\r\n\r\n            visibleRec: false,\r\n            placeholderRec: this.$t('parcelas.recinto'),\r\n            labelRec: this.$t('parcelas.recinto_sel'),\r\n            recintos: Array,\r\n            recintoSel: 0,\r\n\r\n            //\r\n            selectedParcelList: 0,\r\n            colorParcela: 'green',\r\n            //BTN GUARDADO\r\n            kindSave: \"primary\",\r\n            sizeSave: \"\",\r\n            disabledSave: false,    \r\n            featuress: [],\r\n            title_card: \"\",\r\n            subtitle_card: \"\",\r\n            closeAriaLabel: \"Close\",\r\n            use_label: true,\r\n            use_title: true,\r\n            use_content: true,\r\n            size: 'lg',\r\n            use_primaryButton: true,\r\n            primaryButtonDisabled: false,\r\n            autoHideOff: true,\r\n            //input-name\r\n            labelName: this.$t('parcelas.parcel_name'),\r\n            valueName: '',\r\n            disabledName: false,\r\n            inputTypeName: 'text',\r\n            placeholderName: this.$t('parcelas.place_name'),\r\n            invalidMessageName: '',\r\n            \r\n            //input-email\r\n            labelDesc: this.$t('parcelas.parcel_descrip'),\r\n            valueDesc: '',\r\n            disabledDesc: false,\r\n            inputTypeDesc: 'text',\r\n            placeholderDesc: this.$t('parcelas.place_descrip'),\r\n            invalidMessageDesc: '',\r\n            //BingMap Config\r\n            apiKeyBing: this.$apiKeyBing,\r\n            imagerySetBing: `AerialWithLabels`,\r\n            maxZoomBing: 20,\r\n            zoom: 15,\r\n            center:  [0 , 0],\r\n            coordinates: [0 , 0],\r\n            coordenadasParcel: [ [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ], [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ] ],\r\n            parcel: Array(),\r\n            dibujaPoligono: false,\r\n            //GUARDADO DE DATOS\r\n            area: 0,\r\n            poligonObjecto: '',\r\n            verErrorDraw: false,\r\n            coordinatesPoligono: [],\r\n            allFeatures: Array(),\r\n            allParcels: Array(),\r\n            refreshDibujo: 0,\r\n            ModificaPoligono: true,\r\n            ErrorDraw: '',\r\n            coordenadasPunto: [0, 0],\r\n        }\r\n    },\r\n    methods: {\r\n        cerrarModal(){\r\n            const titulo = document.querySelectorAll('[aria-label=\"Editar Parcela \"]');\r\n            titulo[0].addEventListener('mouseenter', () => {\r\n                console.log(\"Acabo de entrar\");\r\n                this.autoHideOff = false;\r\n            });\r\n            titulo[0].addEventListener('mouseleave', () => {\r\n                console.log(\"Acabo de salir\");\r\n                this.autoHideOff = true;\r\n            });\r\n\r\n        },\r\n        metricaparcela(area){\r\n            const onehecttoAcre = 2.4710538146717\r\n            const acre = onehecttoAcre * area\r\n            this.metric = \"Acre\"\r\n            return  acre.toFixed(2)\r\n        },\r\n        cargaLocalizacionActual(){\r\n            if(!(\"geolocation\" in navigator)) {\r\n                this.erorCompaGeoloc =  this.$t('map.loc_no_disponible')\r\n                this.mostrarIconErrGeoloc = true\r\n                return;\r\n            }\r\n            \r\n            // get position\r\n            navigator.geolocation.getCurrentPosition(pos => {\r\n                console.info('Localizacion autorizada', pos)\r\n                this.mostrarIconErrGeoloc = false;\r\n                this.center = [pos.coords.longitude, pos.coords.latitude]\r\n            }, err => {\r\n                this.mostrarIconErrGeoloc = true\r\n                console.info('Localización no autorizada', err)\r\n            })\r\n        },\r\n        getEnterprise(){\r\n            if(this.$route.query.enterprise){\r\n                    const path = `${this.$apiURL}/enterprises/${this.$route.query.enterprise}/?size=1000000000&page=1`;\r\n                    axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n                    axios\r\n                        .get(path)\r\n                        .then(response => {\r\n                            this.enterprise = response.data\r\n                            this.metric = this.enterprise.type_metric;\r\n                            this.actionShownMap();\r\n                        })\r\n                        .catch(error => {\r\n                            console.warn(error);\r\n                        });\r\n            }\r\n        },\r\n        bucardorSigpacDirect(){\r\n            const arrSel = [this.vProv, this.vMun, this.vAgre, this.vZona, this.vPol, this.vPar, this.vRec]\r\n            const arrURI = ['provinciabox', 'municipiobox', 'agregadobox', 'zonabox', 'poligonobox', 'parcelabox', 'recintobox']\r\n            let cont = -1\r\n            console.info(arrSel)\r\n            let uriParams = ``\r\n            arrSel.map(value=>{\r\n                if(value){\r\n                    cont ++\r\n                    uriParams += `/${value}`\r\n                }\r\n            })\r\n            if(uriParams == '')\r\n                return false\r\n            let dato=arrURI[cont]+uriParams\r\n            getDirect(dato)\r\n            .then(response => {\r\n                const lat = (response.data.data.features[0].properties.x1 + response.data.data.features[0].properties.x2) / 2\r\n                const long = (response.data.data.features[0].properties.y1 + response.data.data.features[0].properties.y2) / 2\r\n                this.coordenadasPunto = [lat, long] \r\n                this.center = [lat, long]\r\n                this.zoom = 18\r\n                this.verErrorBusq = false\r\n            })\r\n            .catch(() => {\r\n                this.verErrorBusq = true\r\n            })\r\n        },\r\n        cargarComunidades(){\r\n            console.log('Cargando comunidades')\r\n            getComunidades()\r\n            .then(response=>{\r\n                this.comunidades=response.data.data.features\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n        },\r\n        actionChangeComunidades(comunidad){\r\n            getProvincias(comunidad)\r\n            .then(response=>{\r\n                this.placeholderComunidad = comunidad\r\n                const comunidadSelec = comunidad\r\n                this.comunidades.forEach(comunidad => {\r\n                    if(comunidad.properties.codigo == comunidadSelec){\r\n                        this.placeholderComunidad = comunidad.properties.nombre\r\n                    }\r\n                })\r\n                this.provincias = response.data.data.features\r\n                this.visibleProv = true\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n\r\n        },\r\n        actionChangeProv(provincia){\r\n            getMunicipios(provincia)\r\n            .then(response => {\r\n                this.provinciaSel = provincia\r\n                \r\n                this.placeholderProv = provincia\r\n                this.provincias.forEach(provincia => {\r\n                    if(provincia.properties.codigo == this.provinciaSel){\r\n                        this.placeholderProv = provincia.properties.nombre\r\n                    }\r\n                })\r\n                this.municipios = response.data.data.features\r\n                this.visibleMun = true\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n\r\n        },\r\n        actionChangeMun(municipio){\r\n            getAgregados(this.provinciaSel,municipio)\r\n            .then(response => {\r\n                this.placeholderMun = municipio\r\n                let unique = [...new Set(response.data.data.features.map(x => x.properties.codigo))]; \r\n                this.agregados = unique\r\n                this.visibleAgre = true\r\n                this.municipioSel = municipio\r\n                this.placeholderMun = municipio\r\n                this.municipios.forEach(municipio => {\r\n                    if(municipio.properties.codigo == this.municipioSel){\r\n                        this.placeholderMun = municipio.properties.nombre\r\n                    }\r\n                })\r\n                if(this.agregados.length == 1){\r\n                    this.actionChangeAgre(this.agregados[0])\r\n                    this.placeholderAgre = this.agregados[0]\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.warn(error)\r\n            })\r\n\r\n        },\r\n        actionChangeAgre(agregado){\r\n            getZonas(this.provinciaSel,this.municipioSel,agregado)\r\n            .then(response => {\r\n                this.placeholderAgre = agregado\r\n                let unique = [...new Set(response.data.data.features.map(x => x.properties.codigo))]; \r\n                this.zonas = unique\r\n                this.visibleZona = true\r\n                this.agregadoSel = agregado \r\n                if(this.agregados.length == 1){\r\n                    this.actionChangeZona(this.agregados[0])\r\n                    this.placeholderAgre = this.agregados[0]\r\n                }\r\n                \r\n            })\r\n            .catch(error => {\r\n                console.warn(error)\r\n            })\r\n\r\n        },\r\n        actionChangeZona(zona){\r\n            getPoligonos(this.provinciaSel,this.municipioSel,this.agregadoSel,zona)\r\n            .then(response => {\r\n                this.zonaSel = zona\r\n                this.placeholderZona = zona\r\n                this.poligonos = response.data.data.features\r\n                this.visiblePol = true\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n\r\n        },\r\n        actionChangePol(poligono){\r\n            getParcelas(this.provinciaSel,this.municipioSel,this.agregadoSel,this.zonaSel,poligono)\r\n            .then(response => {\r\n                this.poligonoSel = poligono\r\n                this.placeholderPol = poligono\r\n                this.parcelas = response.data.data.features\r\n                this.visiblePar = true\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n\r\n        },\r\n        actionChangePar(parcela){\r\n            let parcelaCOD = 0\r\n            this.parcelas.forEach(parcelaMap =>{\r\n                if(parcelaMap.properties.dn_pk == parcela){\r\n                    parcelaCOD = parcelaMap.properties.codigo\r\n                }\r\n            })\r\n            getRecintos(this.provinciaSel,this.municipioSel,this.agregadoSel,this.zonaSel,this.poligonoSel,parcelaCOD)\r\n            .then(response => {\r\n                this.parcelaSel = parcela\r\n                this.placeholderPar = parcelaCOD\r\n                this.recintos = response.data.data.features\r\n                this.visibleRec = true\r\n            })\r\n            .catch(error => {\r\n                console.warn(error.response)\r\n            })\r\n\r\n        },\r\n\r\n        actionChangeRec(recintoSell){\r\n            this.recintos.forEach(recinto => {\r\n                if(recinto.properties.dn_pk == recintoSell){\r\n                    const lat = (recinto.properties.x1 + recinto.properties.x2) / 2\r\n                    const long = (recinto.properties.y1 + recinto.properties.y2) / 2\r\n                    this.coordenadasPunto = [lat, long] \r\n                    this.center = [lat, long]\r\n                    this.zoom = 18\r\n                }\r\n            })\r\n        },\r\n        setPlace(place){\r\n            this.center = [place.geometry.location.lng(), place.geometry.location.lat()]\r\n            this.zoom = 15\r\n        },\r\n        openModal(userSelec) {\r\n            this.$refs.editarRolForm.show();\r\n            this.verErrorDraw = false\r\n            this.invalidMessageName = \"\"\r\n            this.showPassword = false\r\n            this.title_card = this.$t('parcelas.parcel_edit')\r\n            this.subtitle_card = this.$t('parcelas.parcel_edit')\r\n            this.userSeleccionado = userSelec;\r\n            this.getEnterprise();\r\n            this.actionShownMap();\r\n                \r\n        },\r\n        terminado(p){\r\n            this.dibujaPoligono = false\r\n            this.area = (Math.round((getArea(p.feature.getGeometry())/ 10000) * 10000) / 10000)\r\n            this.coordinatesBuenas(p.feature.getGeometry().getCoordinates())\r\n            this.verErrorDraw = false\r\n        },\r\n        editado(p){\r\n            this.coordinatesEditadas = p.features.array_[0].getGeometry().getCoordinates()\r\n            this.area = (Math.round((getArea(p.features.array_[0].getGeometry()) / 10000) * 10000) / 10000)\r\n            if(this.userSeleccionado){\r\n                this.coordinatesBuenas(this.coordinatesEditadas)\r\n            }\r\n            \r\n            this.verErrorDraw = false\r\n        },\r\n        coordinatesBuenas(ArrayCoor){\r\n            if(this.userSeleccionado){\r\n                this.ModificaPoligono = true\r\n            }else{\r\n                this.ModificaPoligono = false\r\n            }\r\n            \r\n            var source = new proj4.Proj('EPSG:3785'); \r\n            var dest = new proj4.Proj('EPSG:4326'); \r\n            let newCenter = Array;\r\n            let polygonObject= 'POLYGON(('\r\n            for (var i = 0; i < ArrayCoor[0].length; i++) {\r\n                newCenter = proj4(source, dest, [ArrayCoor[0][i][0], ArrayCoor[0][i][1]])\r\n                this.coordinatesPoligono.push([newCenter[0] , newCenter[1]])\r\n                polygonObject += newCenter[0]+' '+newCenter[1]\r\n                if(i != (ArrayCoor[0].length-1)){\r\n                    polygonObject += ', '\r\n                }\r\n            }\r\n            polygonObject += '))';\r\n            this.poligonObjecto = polygonObject\r\n            \r\n            let path = `${this.$apiURL}/parcel_filter/?enterprise_id=${this.$route.query.enterprise}&polygon=${polygonObject}`;\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n            .get(path)\r\n            .then(response => {\r\n                if(response.data.features.length){\r\n                    this.errorDraw = ''\r\n                    this.verErrorDraw = false\r\n                    response.data.features.forEach(parcela =>{\r\n                        if(this.userSeleccionado != parcela.id){\r\n                            this.errorDraw += `\"${parcela.properties.name}\"  `\r\n                            if(!this.userSeleccionado){\r\n                                this.featuress = []\r\n                                this.dibujaPoligono = true\r\n                            }\r\n                        }\r\n                    })\r\n                    if(this.errorDraw){\r\n                        this.verErrorDraw = true\r\n                        this.disabledSave = true\r\n                        this.errorDraw = `${this.$t('parcelas.parcela_solapada_con')}   ${this.errorDraw}`\r\n                        this.colorParcela = 'red'\r\n                    }else{\r\n                        this.compruebaParcelaSimple(polygonObject)\r\n                    }\r\n                }else{\r\n                    this.compruebaParcelaSimple(polygonObject)\r\n                }\r\n            })\r\n            .catch(error =>{ \r\n                console.info(error.data)\r\n            })\r\n        },\r\n        compruebaParcelaSimple(polygonObject){\r\n            let path = `${this.$apiURL}/parcel_valid/?polygon=${polygonObject}`;\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n            .get(path)\r\n            .then(response=>{\r\n                if(response.data == \"False\"){\r\n                    this.verErrorDraw = true\r\n                    this.disabledSave = true\r\n                    this.errorDraw = `${this.$t('parcelas.parcela_solapada_si')}`\r\n                    this.colorParcela = 'red'\r\n                    if(!this.userSeleccionado){\r\n                        this.featuress = []\r\n                        this.dibujaPoligono = true\r\n                    }\r\n                }else{\r\n                    this.verErrorDraw = false\r\n                    this.disabledSave = false\r\n                    this.colorParcela = 'green'\r\n                    this.disabledSave = false\r\n                    this.compruebaLimites()\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.warn(error)\r\n            })\r\n        },\r\n        compruebaLimites(){\r\n            let path = `${this.$apiURL}/enterprises_except/${this.$route.query.enterprise}/?parcel=${this.userSeleccionado}`;\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n            .get(path)\r\n            .then(response =>{\r\n                const porcentaje_ant = (parseFloat(this.$parent.total_hectares_enterprise) / parseFloat(response.data.hectares_available)  * 100)\r\n                const porcentaje_now = ((parseFloat(response.data.parcels.area__sum)+parseFloat(this.area)) / parseFloat(response.data.hectares_available) * 100)\r\n                if(parseFloat(porcentaje_ant) < parseFloat(porcentaje_now)){\r\n                    if(porcentaje_now > 100.00){\r\n                        this.verErrorDraw = true\r\n                        this.disabledSave = true\r\n                        this.errorDraw = `${this.$t('parcelas.parcela_limite_area')}`\r\n                        this.colorParcela = 'red'\r\n                        if(!this.userSeleccionado){\r\n                            this.featuress = []\r\n                            this.dibujaPoligono = true\r\n                        }\r\n                    }else{\r\n                        this.verErrorDraw = false\r\n                        this.disabledSave = false\r\n                        this.colorParcela = 'green'\r\n                        this.disabledSave = false\r\n                    }\r\n                }else{\r\n                    this.verErrorDraw = false\r\n                    this.disabledSave = false\r\n                    this.colorParcela = 'green'\r\n                    this.disabledSave = false\r\n                }\r\n            })\r\n        },\r\n        actionPrimary(){\r\n            if(!this.verErrorDraw){\r\n                let path = ''\r\n                \r\n                if(this.userSeleccionado){\r\n                    if(!this.poligonObjecto){\r\n                        this.coordinatesBuenas(this.$refs['parcela'].$geometry.getCoordinates())\r\n                    }\r\n                    path = `${this.$apiURL}/parcels/${this.userSeleccionado}/`;\r\n                    axios\r\n                    .put(path, {\r\n                        name: this.$refs.inputName.$refs.input.value,\r\n                        description: this.$refs.inputDesc.$refs.input.value,\r\n                        polygon: this.poligonObjecto,\r\n                        area: this.area,\r\n                        enterprise: (this.$route.query.enterprise) ? this.$route.query.enterprise : sessionStorage.getItem('enterprise'),\r\n                        user_updated: sessionStorage.getItem('user')\r\n                    })\r\n                    .then(response => {\r\n                        this.compruebaParcelas(response.data.id);\r\n                    })\r\n                    .catch(error => {\r\n                        console.info(error);\r\n                    \r\n                    });\r\n                }else{\r\n                    path = `${this.$apiURL}/parcels/`;\r\n                    axios\r\n                    .post(path, {\r\n                        name: this.$refs.inputName.$refs.input.value,\r\n                        description: this.$refs.inputDesc.$refs.input.value,\r\n                        polygon: this.poligonObjecto,\r\n                        area: this.area,\r\n                        enterprise: (this.$route.query.enterprise) ? this.$route.query.enterprise : sessionStorage.getItem('enterprise'),\r\n                        user_created: sessionStorage.getItem('user')\r\n                    })\r\n                    .then(response => {\r\n                        this.compruebaParcelas(response.data.id);\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.data.name)\r\n                            this.invalidMessageName = error.response.data.name[0];\r\n                        if (error.response.data.polygon)\r\n                            this.verErrorDraw = true\r\n                            this.errorDraw = this.$t('parcelas.parcela_limite')\r\n                        \r\n                    });   \r\n                }\r\n            }\r\n            \r\n        },\r\n        compruebaParcelas(parcelaid){    \r\n            let path = `${this.$apiURL}/enterprises/${this.$route.query.enterprise}/`;\r\n            var allCoordinates = Array();\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n            .get(path)\r\n            .then(response => {\r\n                \r\n                response.data.parcels.features.forEach(element => {\r\n                    allCoordinates.push(element.geometry.coordinates)\r\n                });\r\n            \r\n                console.info(this.coordinatesPoligono, parcelaid)      \r\n                const instanceIns = axios.create({\r\n                    baseURL: this.$sentinelURL\r\n                })\r\n                const configIns = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8',\r\n                        'Authorization': \"Bearer \"+localStorage.getItem('ApiAccessToken')\r\n                    }\r\n                }\r\n                const bodyIns = JSON.stringify({\r\n                        'name': `${this.$route.query.enterprise}`,\r\n                        \"userId\": \"6b9e0c32-9a47-4c08-bb44-8a5b7c178c41\",\r\n                        \"additionalData\": {\r\n                            \"showLogo\": false,\r\n                            \"showWarnings\": false,\r\n                            \"imageQuality\": 90,\r\n                            \"disabled\": false\r\n                        },\r\n                        'areaOfInterest': {\r\n                            'type': \"MultiPolygon\",\r\n                            'coordinates': allCoordinates\r\n                            ,\"crs\": {\r\n                                \"type\": \"name\",\r\n                                \"properties\": {\r\n                                    \"name\": \"urn:ogc:def:crs:EPSG::4326\"\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                instanceIns.put(\"/configuration/v1/wms/instances/\"+sessionStorage.getItem('sI'), bodyIns, configIns).then((resp) => {\r\n                    console.info(`respuesta sentinel`, resp)\r\n                    if(resp.status == 200 || resp.statusText == 'OK'){\r\n                        this.$parent.getUsers();\r\n                        this.$refs.editarRolForm.hide();\r\n                        this.$parent.componentKey += 1;\r\n                        this.coordenadasParcel = ''\r\n                        this.$parent.mensajeAlerta = this.$t('parcelas.parcela_guardada')\r\n                        this.$parent.tipoAlerta = 'success'\r\n                        this.$parent.$refs.alertaGeneral.verAlerta()\r\n                    }else{\r\n                        this.$parent.getUsers();\r\n                        this.$refs.editarRolForm.hide();\r\n                        this.$parent.componentKey += 1;\r\n                        this.coordenadasParcel = ''\r\n                        this.$parent.mensajeAlerta = this.$t('parcelas.parcel_guardada_error_sent')\r\n                        this.$parent.tipoAlerta = 'error'\r\n                        this.$parent.$refs.alertaGeneral.verAlerta()\r\n                    }\r\n                    \r\n                }).catch(error => {\r\n                    console.info(`error`, error)\r\n                    this.$parent.getUsers();\r\n                    this.$refs.editarRolForm.hide();\r\n                    this.$parent.componentKey += 1;\r\n                    this.coordenadasParcel = ''\r\n                    this.$parent.mensajeAlerta = this.$t('parcelas.parcel_guardada_error_sent')\r\n                    this.$parent.tipoAlerta = 'error'\r\n                    this.$parent.$refs.alertaGeneral.verAlerta()\r\n                })\r\n                \r\n                \r\n            })\r\n        },\r\n        actionShown(){\r\n            this.coordenadasParcel = ''\r\n            this.$parent.componentKey += 1;\r\n        },        \r\n        actionShownMap(){\r\n            //Si el usuario seleccionado esta vacio \r\n            let path = `${this.$apiURL}/parcels/${this.userSeleccionado}/`;\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n                .get(path)\r\n                .then(response => {\r\n                    \r\n                    this.parcel = response.data\r\n                    this.valueName = response.data.properties.name;\r\n                    this.valueDesc = response.data.properties.description;\r\n                    this.geometry = response.data;\r\n                    this.area = response.data.properties.area;\r\n                    this.coordenadasParcel = this.geometry.geometry.coordinates\r\n                    let coordenadasGeometricas = ''\r\n                    coordenadasGeometricas = this.$refs['parcela'].$geometry.extent_\r\n                    const ex = coordenadasGeometricas[0] + (coordenadasGeometricas[2]-coordenadasGeometricas[0])/2;\r\n                    const ye = coordenadasGeometricas[1] + (coordenadasGeometricas[3]-coordenadasGeometricas[1])/2;\r\n                    var source = new proj4.Proj('EPSG:3785'); \r\n                    var dest = new proj4.Proj('EPSG:4326');  \r\n                    const newCenter = proj4(source, dest, [ex, ye])\r\n                    this.center = [newCenter[0], newCenter[1]]\r\n                    this.zoom = 15\r\n                    this.dibujaPoligono = false\r\n                    console.info(response.data)\r\n                    \r\n                    //this.metric= this.metricaparcela(response.data.properties);\r\n                })\r\n                .catch( error => {\r\n                    console.info('entra')\r\n                    this.cargarComunidades()\r\n                    console.warn(error)\r\n                    this.disabledSave = true\r\n                    this.showPassword = true\r\n                    this.title_card = this.$t('parcelas.parcel_nueva')\r\n                    this.subtitle_card = this.$t('parcelas.parcel_nueva')\r\n                    this.valueName = '';\r\n                    this.valueDesc = '';\r\n                    this.coordenadasParcel = [0,0]\r\n                    this.center = [0, 0]\r\n                    this.zoom = 4\r\n                    this.dibujaPoligono = true\r\n                });\r\n                \r\n            path = `${this.$apiURL}/parcel_enterprise/${this.$route.query.enterprise}/`;\r\n            axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n            axios\r\n            .get(path)\r\n            .then(response => {\r\n                this.allParcels=response.data.features\r\n                if(!this.userSeleccionado){\r\n                    const lastItem = this.allParcels[this.allParcels.length - 1]\r\n                    this.selectedParcelList = lastItem.id\r\n                    setTimeout(() => {\r\n                        this.actionChangeParcels(this.selectedParcelList)\r\n                    }, 1000);\r\n                    \r\n                }else{\r\n                    this.selectedParcelList = this.userSeleccionado\r\n                }\r\n            })\r\n        \r\n        \r\n        },\r\n        actionChangeParcels(valor){\r\n            const coordenadasGeometricas = this.$refs[valor+'parcela'][0].$geometry.extent_\r\n            const ex = coordenadasGeometricas[0] + (coordenadasGeometricas[2]-coordenadasGeometricas[0])/2;\r\n            const ye = coordenadasGeometricas[1] + (coordenadasGeometricas[3]-coordenadasGeometricas[1])/2;\r\n            var source = new proj4.Proj('EPSG:3785'); \r\n            var dest = new proj4.Proj('EPSG:4326');  \r\n            const newCenter = proj4(source, dest, [ex, ye])\r\n            this.center = [newCenter[0], newCenter[1]]\r\n            this.zoom = 16\r\n        },\r\n        \r\n        \r\n    },\r\n    mounted(){\r\n        console.log('MOUNTED')\r\n        const path_lang = `${this.$apiURL}/profiledata/${this.$session.get('user')}/`;\r\n        axios.defaults.headers.common['Authorization'] = \"Bearer \"+sessionStorage.getItem(\"apiAccess\")\r\n        axios\r\n        .get(path_lang)\r\n        .then(response =>{\r\n            this.$root.$i18n.locale = response.data.language\r\n        })\r\n        this.$refs.comunidadesSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.provinciasSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.munSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.agreSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.zonaSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.polSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.parSelect.$el.firstChild.style.display = 'flex'\r\n        this.$refs.recSelect.$el.firstChild.style.display = 'flex'\r\n\r\n        this.$refs.editarRolForm.$el.firstChild.style.width = '98%'\r\n        this.$refs.editarRolForm.$el.firstChild.style.height = '95%'\r\n        this.$refs.editarRolForm.$el.firstChild.style[\"max-width\"] = '100%'\r\n        this.$refs.editarRolForm.$el.firstChild.style[\"max-height\"] = '100%'\r\n\r\n        this.$refs.editarRolForm.$el.firstChild.childNodes[2].style[\"padding-right\"] = '1%'\r\n        this.$refs.editarRolForm.$el.firstChild.childNodes[2].style[\"margin-bottom\"] = '1%'\r\n        this.$refs.editarRolForm.$el.firstChild.childNodes[2].style[\"height\"] = '95%'\r\n        this.cargarComunidades()\r\n    },\r\n    created(){\r\n        var estilo = document.createElement('style');\r\n        document.head.appendChild(estilo);\r\n        var hojaEstilo = estilo.sheet;\r\n        hojaEstilo.insertRule('.bx--modal-container--lg { width: 96% !important; height:95% !important; max-height: 100%; max-width: 100% }', 0);\r\n    },\r\n    beforeCreate(){\r\n        this.cerrarModal()\r\n    }\r\n    \r\n}\r\n</script>\r\n<style scoped>\r\n    #div_buscador{\r\n        width: 50vw;\r\n        position: fixed;\r\n        padding: 10px;\r\n        margin-top: 4px;\r\n        margin-left: 40px;\r\n        top: 79px;\r\n\r\n    }\r\n    .bx--modal-container{\r\n        width: 98%;\r\n        height: 95%;\r\n        max-height: 100%;\r\n    }\r\n    .errorDraw{\r\n        color: #da1e28;\r\n        font-weight: 400;\r\n        font-size: 12px;\r\n    }\r\n    #row_box, #row_box >div{\r\n        height: 100%;\r\n    }\r\n    #div_map{\r\n        height: 100%;\r\n        \r\n    }\r\n    .mapa{\r\n        height: 100% !important;\r\n        color: white;\r\n    }\r\n    #sentinelLayersList{\r\n        overflow: scroll;\r\n        height: 540px;\r\n    }\r\n    .pac-container{\r\n        z-index: 10000!important;\r\n    }\r\n    @media (min-width: 42rem){\r\n        .bx--modal-container--lg {\r\n    width: 96% !important;\r\n}\r\n    }\r\n\r\n</style>\r\n"]}]}
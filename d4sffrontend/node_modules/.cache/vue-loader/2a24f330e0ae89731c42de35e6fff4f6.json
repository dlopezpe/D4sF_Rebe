{"remainingRequest":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\src\\components\\importParcels\\InportParcelsComponent.vue?vue&type=template&id=0da2889a&scoped=true&","dependencies":[{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\src\\components\\importParcels\\InportParcelsComponent.vue","mtime":1671530138659},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\PruebaFront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\importParcels\\InportParcelsComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\importParcels\\InportParcelsComponent.vue","mtime":1709553265789},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQge2dldFByb2ZpbGUsIGdldFBlcm1pc29zfSBmcm9tICdAL2F1dGgvaW5kZXgnDQppbXBvcnQge2dldEFsbEVudGVycHJpc2VzLCBnZXRFbnRlcnByaXNlfSBmcm9tICdAL2NydWRGdW5jdGlvbnMvY3J1ZEVudGVycHJpc2UnLy9nZXRGZWNoYXNTZW50aW5lbEZvckluZm9ybWVzDQppbXBvcnQge2dldEFsbENvb3BlcmF0aXZlcywgZ2V0Q29vcGVyYXRpdmV9IGZyb20gJ0AvY3J1ZEZ1bmN0aW9ucy9jcnVkQ29vcGVyYXRpdmFzJw0KaW1wb3J0IHtpbXBvcnRQYXJjZWxzRnJvbUZpbGV9IGZyb20gJ0AvY3J1ZEZ1bmN0aW9ucy9jcnVkRW50ZXJwcmlzZScNCmltcG9ydCBBbGVydGFHZW5lcmFsIGZyb20gIkAvY29tcG9uZW50cy9BbGVydGFHZW5lcmFsIjsNCmV4cG9ydCBkZWZhdWx0IHsNCiAgICBuYW1lOiAnTW9uaXRvcicsDQogICAgY29tcG9uZW50czoge0FsZXJ0YUdlbmVyYWx9LA0KICAgIGRhdGEoKXsNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgIGlzQWN0aXZlTG9hZGluZzogZmFsc2UsDQogICAgICAgICAgICBleHBvcnRhckV4Y2VsOiBmYWxzZSwNCiAgICAgICAgICAgIC8vDQogICAgICAgICAgICBrZXlDb21wb25lbnRNb25pdG9yOiAwLA0KICAgICAgICAgICAgdmlzaWJsZU1vZGFsOiBmYWxzZSwNCiAgICAgICAgICAgIGRhdGE6IHt9LA0KICAgICAgICAgICAgZmVjaGFzQXJyOiBBcnJheSgpLA0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIHNlbGVjdFZhbHVlRW1wcmVzYTogJycsDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgZmxhZ0luZGljYXRpbmdEYXRhSGFzQmVlbkxvYWRlZEluVmFyaWFibGVzOiBmYWxzZSwNCiAgICAgICAgICAgIC8vVXN1YXJpbw0KICAgICAgICAgICAgaXNfc3VwZXJ1c2VyOiBmYWxzZSwNCiAgICAgICAgICAgIGlzX3N0YWZmOiBmYWxzZSwNCiAgICAgICAgICAgIGlzX3N5c3RlbWFkbWluOiBmYWxzZSwNCiAgICAgICAgICAgIGlzX2VudGVycHJpc2VhZG1pbjogZmFsc2UsDQogICAgICAgICAgICBpc19jb29wX3VzZXI6IGZhbHNlLA0KICAgICAgICAgICAgLy9FbXByZXNhcyBzZWwNCiAgICAgICAgICAgIGFyckVtcHJlc2FzOiBbXSwNCiAgICAgICAgICAgIGFyckVtcHJlc2FzTGlzdDogW10sDQogICAgICAgICAgICBhcnJDb29wZXJhdGl2YXM6IFtdLA0KICAgICAgICAgICAgYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXM6IFtdLA0KICAgICAgICAgICAgYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXI6IFtdLA0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIHN0YXJ0OiAwLA0KICAgICAgICAgICAgbGVuZ3RoOiAxMCwNCiAgICAgICAgICAgIC8vDQogICAgICAgICAgICByb3dTZWxlY3RzOiBbXSwNCiAgICAgICAgICAgIHNlbGVjdFZhbHVlQ2FwYTogJycsDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgU2VudGluZWxMYXllcjogJ05EVkknLA0KICAgICAgICAgICAgY2FsT3B0aW9uczogew0KICAgICAgICAgICAgICAgICJkYXRlRm9ybWF0IjogIlktbS1kIg0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHRpbWU6IGBgLA0KICAgICAgICAgICAgdmFsdWVEYXRlczogW10sDQogICAgICAgICAgICB2YWx1ZVJhbmdlOiBbXSwNCiAgICAgICAgICAgIHRpbWVWYWx1ZXNBcnI6IFtdLA0KICAgICAgICAgICAgbm9tYnJlSW5mb3JtZTogYEdyw6FmaWNvIC0gJHt0aGlzLmdldE5vdygpfWAsDQogICAgICAgICAgICBjaGVja2VkX2Nsb3VkczogZmFsc2UsDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgdGlwb0FsZXJ0YTogYGVycm9yYCwNCiAgICAgICAgICAgIG1lbnNhamVBbGVydGE6ICcnLA0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIGZlY2hhc1BhcmNlbGFzTnVtSW1hZ2VzOiB7fSwNCiAgICAgICAgICAgIHZlckNhcmdhbmRvSW1hZ2VuZXM6IGZhbHNlLA0KICAgICAgICAgICAgLy8NCiAgICAgICAgICAgIGRpc2FibGVkR2VuZXJhcjogZmFsc2UsDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgdmVyRXJyb3JJbnRlcnZhbG86IGZhbHNlLA0KICAgICAgICAgICAgdmVyQ2FyZ2FuZG9GZWNoYXNCYm94OiBmYWxzZSwNCiAgICAgICAgICAgIC8vDQogICAgICAgICAgICBpbml0aWFsU3RlcDogMSwNCiAgICAgICAgICAgIHN0ZXBzOiBbDQogICAgICAgICAgICAgICAgIk5vbWJyZSBkZSBpbmZvcm1lIHkgU2VsZWNjacOzbiBkZSBQYXJjZWxhcyIsDQogICAgICAgICAgICAgICAgIlNlbGVjY2nDs24gZGUgY2FwYXMgeSBOdWJlcyIsDQogICAgICAgICAgICAgICAgIlNlbGVjY2nDs24gZGUgRmVjaGFzIiwNCiAgICAgICAgICAgICAgICAiUmVzdW1lbiBkZSBJbmZvcm1lIiwNCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICBvcGVuOiBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdLA0KICAgICAgICAgICAgdmVyVGltZW91dE51bUltZzogZmFsc2UsDQogICAgICAgICAgICAvLw0KICAgICAgICAgICAgZmlsZTogbnVsbCwNCiAgICAgICAgICAgIHByb2Nlc2FkYXM6IFtdLA0KICAgICAgICAgICAgZXJyb3JlczogW10sDQogICAgICAgICAgICBjYW1iaWFkYXM6IFtdLA0KICAgICAgICAgICAgdG90YWxQYXJjZWxhczogMA0KICAgICAgICB9DQogICAgfSwNCiAgICBtZXRob2RzOiB7DQogICAgICAgIGFjdGlvblZpc2libGVNb2RhbChhY3Rpb24pew0KICAgICAgICAgICAgdGhpcy52aXNpYmxlTW9kYWwgPSBhY3Rpb24NCiAgICAgICAgfSwNCiAgICAgICAgDQogICAgICAgIG9uQ2hhbmdlRmlsZXMoZmlsZSl7DQogICAgICAgICAgICB0aGlzLmZpbGUgPSBmaWxlDQogICAgICAgIH0sDQogICAgICAgIGltcG9ydGFyUGFyY2VsYXMoKXsNCiAgICAgICAgICAgIGlmKCF0aGlzLmZpbGUpew0KICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnTm8gaGF5IGFyY2hpdm8nKQ0KICAgICAgICAgICAgICAgIHRoaXMubWVuc2FqZUFsZXJ0YSA9IGBEZWJlIHNlbGVjY2lvbmFyIHVuIGFyY2hpdm9gDQogICAgICAgICAgICAgICAgdGhpcy50aXBvQWxlcnRhID0gYGVycm9yYA0KICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuYWxlcnRhR2VuZXJhbGwudmVyQWxlcnRhKCkNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmKCF0aGlzLnNlbGVjdFZhbHVlRW1wcmVzYSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdObyBoYXkgZW1wcmVzYScpDQogICAgICAgICAgICAgICAgdGhpcy5tZW5zYWplQWxlcnRhID0gYERlYmUgc2VsZWNjaW9uYXIgdW5hIGVtcHJlc2FgDQogICAgICAgICAgICAgICAgdGhpcy50aXBvQWxlcnRhID0gYGVycm9yYA0KICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuYWxlcnRhR2VuZXJhbGwudmVyQWxlcnRhKCkNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnSW1wb3J0YW5kbyBwYXJjZWxhcycpDQogICAgICAgICAgICB0aGlzLmlzQWN0aXZlTG9hZGluZyA9IHRydWUNCiAgICAgICAgICAgIGltcG9ydFBhcmNlbHNGcm9tRmlsZSh0aGlzLmZpbGVbMF0uZmlsZSwgdGhpcy5zZWxlY3RWYWx1ZUVtcHJlc2EsIGZhbHNlKQ0KICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gew0KICAgICAgICAgICAgICAgIHRoaXMuaXNBY3RpdmVMb2FkaW5nID0gZmFsc2UNCiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8ocmVzcG9uc2UuZGF0YSkNCiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRQcm9jZXNhZGFzID0gW10NCiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnByb2Nlc2FkYXMubWFwKGl0ZW0gPT4gew0KICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQcm9jZXNhZGFzLnB1c2goW2l0ZW1dKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkRXJyb3JlcyA9IFtdDQogICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5PdmVybGFwcy5tYXAoaXRlbSA9PiB7DQogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZEVycm9yZXMucHVzaChbaXRlbV0pDQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRDYW1iaWFkYXMgPSBbXQ0KICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuY2FtYmlhZGFzLm1hcChpdGVtID0+IHsNCiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQ2FtYmlhZGFzLnB1c2goW2l0ZW1dKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNhZGFzID0gZm9ybWF0dGVkUHJvY2VzYWRhcw0KICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JlcyA9IGZvcm1hdHRlZEVycm9yZXMNCiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsUGFyY2VsYXMgPSByZXNwb25zZS5kYXRhLnRvdGFscGFyY2VsYXMNCiAgICAgICAgICAgICAgICB0aGlzLmNhbWJpYWRhcyA9IGZvcm1hdHRlZENhbWJpYWRhcw0KDQogICAgICAgICAgICB9KQ0KICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlTG9hZGluZyA9IGZhbHNlDQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikNCiAgICAgICAgICAgICAgICB0aGlzLm1lbnNhamVBbGVydGEgPSBgRXJyb3IgYWwgaW1wb3J0YXIgcGFyY2VsYXNgDQogICAgICAgICAgICAgICAgdGhpcy50aXBvQWxlcnRhID0gYGVycm9yYA0KICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuYWxlcnRhR2VuZXJhbGwudmVyQWxlcnRhKCkNCiAgICAgICAgICAgIH0pDQogICAgICAgIH0sDQoNCiAgICAgICAgaW1wb3J0YXJQYXJjZWxhc0NvbmZpcm1hcigpew0KICAgICAgICAgICAgaWYoIXRoaXMuZmlsZSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdObyBoYXkgYXJjaGl2bycpDQogICAgICAgICAgICAgICAgdGhpcy5tZW5zYWplQWxlcnRhID0gYERlYmUgc2VsZWNjaW9uYXIgdW4gYXJjaGl2b2ANCiAgICAgICAgICAgICAgICB0aGlzLnRpcG9BbGVydGEgPSBgZXJyb3JgDQogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5hbGVydGFHZW5lcmFsbC52ZXJBbGVydGEoKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYoIXRoaXMuc2VsZWN0VmFsdWVFbXByZXNhKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ05vIGhheSBlbXByZXNhJykNCiAgICAgICAgICAgICAgICB0aGlzLm1lbnNhamVBbGVydGEgPSBgRGViZSBzZWxlY2Npb25hciB1bmEgZW1wcmVzYWANCiAgICAgICAgICAgICAgICB0aGlzLnRpcG9BbGVydGEgPSBgZXJyb3JgDQogICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5hbGVydGFHZW5lcmFsbC52ZXJBbGVydGEoKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY29uc29sZS5pbmZvKCdJbXBvcnRhbmRvIHBhcmNlbGFzJykNCiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmVMb2FkaW5nID0gdHJ1ZQ0KICAgICAgICAgICAgaW1wb3J0UGFyY2Vsc0Zyb21GaWxlKHRoaXMuZmlsZVswXS5maWxlLCB0aGlzLnNlbGVjdFZhbHVlRW1wcmVzYSwgdHJ1ZSkNCiAgICAgICAgICAgIC50aGVuKCgpID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlTG9hZGluZyA9IGZhbHNlDQogICAgICAgICAgICAgICAgdGhpcy5tZW5zYWplQWxlcnRhID0gYFBhcmNlbGFzIGltcG9ydGFkYXMgY29ycmVjdGFtZW50ZWANCiAgICAgICAgICAgICAgICB0aGlzLnRpcG9BbGVydGEgPSBgc3VjY2Vzc2ANCiAgICAgICAgICAgICAgICB0aGlzLiRyZWZzLmFsZXJ0YUdlbmVyYWxsLnZlckFsZXJ0YSgpDQogICAgICAgICAgICB9KQ0KICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLmlzQWN0aXZlTG9hZGluZyA9IGZhbHNlDQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikNCiAgICAgICAgICAgICAgICB0aGlzLm1lbnNhamVBbGVydGEgPSBgRXJyb3IgYWwgaW1wb3J0YXIgcGFyY2VsYXNgDQogICAgICAgICAgICAgICAgdGhpcy50aXBvQWxlcnRhID0gYGVycm9yYA0KICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMuYWxlcnRhR2VuZXJhbGwudmVyQWxlcnRhKCkNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgICB0aGlzLm1lbnNhamVBbGVydGEgPSBgUGFyY2VsYXMgaW1wb3J0YWRhcyBjb3JyZWN0YW1lbnRlYA0KICAgICAgICAgICAgdGhpcy50aXBvQWxlcnRhID0gYHN1Y2Nlc3NgDQogICAgICAgICAgICB0aGlzLiRyZWZzLmFsZXJ0YUdlbmVyYWxsLnZlckFsZXJ0YSgpDQogICAgICAgIH0sDQogICAgICAgIA0KICAgICAgICBzZWxlY2Npb25hRW1wcmVzYShlbXByZXNhKXsNCiAgICAgICAgICAgIGNvbnN0IGFyclBhcmNlbHMgPSBbXQ0KICAgICAgICAgICAgaWYoZW1wcmVzYSA9PSAnYWxsJyl7DQogICAgICAgICAgICAgICAgZ2V0QWxsRW50ZXJwcmlzZXMoKQ0KICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyByZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLm1hcChlbnRlcnByaXNlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlcnByaXNlLnBhcmNlbHMuZmVhdHVyZXMubWFwKHBhcmNlbCA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyclBhcmNlbHMucHVzaChwYXJjZWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckVtcHJlc2FzID0gcmVzcG9uc2UuZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlcyA9IGFyclBhcmNlbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXIgPSBhcnJQYXJjZWxzDQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICB9ZWxzZXsNCiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbXByZXNhLnNwbGl0KCdfJykNCiAgICAgICAgICAgICAgICBpZihyZXN1bHRbMF0gPT0gJ2Nvb3AnKXsNCiAgICAgICAgICAgICAgICAgICAgZ2V0Q29vcGVyYXRpdmUocmVzdWx0WzFdKQ0KICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmVudGVycHJpc2VzLm1hcChlbnRlcnByaXNlID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRlcnByaXNlLnBhcmNlbHMuZmVhdHVyZXMubWFwKHBhcmNlbCA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyclBhcmNlbHMucHVzaChwYXJjZWwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckVtcHJlc2FzID0gcmVzcG9uc2UuZGF0YS5lbnRlcnByaXNlcw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlcyA9IGFyclBhcmNlbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXIgPSBhcnJQYXJjZWxzDQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgIGdldEVudGVycHJpc2UoZW1wcmVzYSkNCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgcmVzcG9uc2UgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5wYXJjZWxzLmZlYXR1cmVzLm1hcChwYXJjZWwgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyclBhcmNlbHMucHVzaChwYXJjZWwpDQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJFbXByZXNhcyA9IFtyZXNwb25zZS5kYXRhXQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlcyA9IGFyclBhcmNlbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXIgPSBhcnJQYXJjZWxzDQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBnZXROb3coKSB7DQogICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7DQogICAgICAgICAgICBjb25zdCBkYXRlID0gdG9kYXkuZ2V0RnVsbFllYXIoKSsnLScrKHRvZGF5LmdldE1vbnRoKCkrMSkrJy0nK3RvZGF5LmdldERhdGUoKTsNCiAgICAgICAgICAgIC8vY29uc3QgdGltZSA9IHRvZGF5LmdldEhvdXJzKCkgKyAiOiIgKyB0b2RheS5nZXRNaW51dGVzKCkgKyAiOiIgKyB0b2RheS5nZXRTZWNvbmRzKCk7DQogICAgICAgICAgICAvL2NvbnN0IGRhdGVUaW1lID0gZGF0ZSArJyAnKyB0aW1lOw0KICAgICAgICAgICAgLy90aGlzLnRpbWVzdGFtcCA9IGRhdGVUaW1lOw0KICAgICAgICAgICAgLy9jb25zb2xlLmluZm8oZGF0ZVRpbWUpDQogICAgICAgICAgICByZXR1cm4gZGF0ZQ0KICAgICAgICB9LA0KICAgICAgICBnZXROYW1lRW50ZXJwcmlzZSh2YWx1ZSl7DQogICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFyckVtcHJlc2FzLmZpbHRlcihlbnRlcnByaXNlID0+IGVudGVycHJpc2UuaWQgPT0gdmFsdWUpDQogICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdLm5hbWUNCiAgICAgICAgfSwNCiAgICAgICAgb25CdXNjYXIoYnVzcXVlZGEpew0KICAgICAgICAgICAgaWYoYnVzcXVlZGEpew0KICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXMuZmlsdGVyKHBhcmNlbCA9PiBwYXJjZWwucHJvcGVydGllcy5uYW1lLnRvVXBwZXJDYXNlKCkuaW5jbHVkZXMoYnVzcXVlZGEudG9VcHBlckNhc2UoKSkpDQogICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlc0ZpbHRlciA9IHJlc3VsdA0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlc0ZpbHRlciA9IHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXMNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYWN0aW9uT25QYWdpbmF0aW9uKGV2KXsNCiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBldi5zdGFydC0xDQogICAgICAgICAgICB0aGlzLmxlbmd0aCA9IGV2Lmxlbmd0aA0KICAgICAgICB9LA0KICAgICAgICBvblNvcnQob3JkZXIpIHsNCiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3JkZXIuaW5kZXgNCiAgICAgICAgICAgIGxldCBjb2x1bW4gPSBgYA0KICAgICAgICAgICAgY29uc3Qgb3JkZW4gPSBvcmRlci5vcmRlcg0KICAgICAgICAgICAgDQogICAgICAgICAgICBzd2l0Y2ggKGluZGV4KSB7DQogICAgICAgICAgICAgICAgY2FzZSAnMCc6DQogICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IGBuYW1lYA0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGNhc2UgJzEnOg0KICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSBgbmFtZWANCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBjYXNlICcyJzoNCiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gJ2FyZWEnDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgY2FzZSAnMyc6DQogICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9ICdlbnRlcnByaXNlJw0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IGBuYW1lYA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYob3JkZW4gPT0gJ2FzY2VuZGluZycpew0KICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXIuc29ydCgoYSwgYikgPT4gcGFyc2VGbG9hdChhLm5hbWUpIC0gcGFyc2VGbG9hdChiLm5hbWUpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhjb2x1bW4pDQogICAgICAgIH0sDQogICAgfSwNCiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7DQogICAgICAgIC8vY29uc29sZS5pbmZvKHRoaXMuJHJlZnMuYWNjKQ0KICAgICAgICB0aGlzLmdldE5vdygpDQogICAgICAgIC8vY29uc29sZS5pbmZvKCdVc2VyIExvZ2dlZCcpDQogICAgfSwNCiAgICBiZWZvcmVDcmVhdGUoKXsNCiAgICAgICAgZ2V0UHJvZmlsZSgpDQogICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHsNCiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSByZXNwb25zZS5kYXRhWzBdDQogICAgICAgICAgICBnZXRQZXJtaXNvcyhyZXNwb25zZS5kYXRhWzBdLnVzZXIpDQogICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5pc19zdXBlcnVzZXIgPSByZXNwb25zZS5kYXRhLmlzX3N1cGVydXNlcg0KICAgICAgICAgICAgICAgIHRoaXMuaXNfc3RhZmYgPSByZXNwb25zZS5kYXRhLmlzX3N0YWZmDQogICAgICAgICAgICAgICAgdGhpcy5pc19zeXN0ZW1hZG1pbiA9IHJlc3BvbnNlLmRhdGEuaXNfc3lzdGVtYWRtaW4NCiAgICAgICAgICAgICAgICB0aGlzLmlzX2VudGVycHJpc2VhZG1pbiA9IHJlc3BvbnNlLmRhdGEuaXNfZW50ZXJwcmlzZWFkbWluDQogICAgICAgICAgICAgICAgdGhpcy5pc19jb29wX3VzZXIgPSB1c2VyLmNvb3BlcmF0aXZlX3VzZXINCiAgICAgICAgICAgICAgICAvKg0KICAgICAgICAgICAgICAgIC8vKk9idGVuZW1vcyBsYSBlbXByZXNhIGRlbCB1c3VhcmlvDQogICAgICAgICAgICAgICAgY29uc3QgZW50ZXJwcmlzZV9pZCA9IHVzZXIuZW50ZXJwcmlzZV9pZA0KICAgICAgICAgICAgICAgIGdldEVudGVycHJpc2UoZW50ZXJwcmlzZV9pZCkNCiAgICAgICAgICAgICAgICAudGhlbihhc3luYyByZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMucGFyY2VsYXMgPSByZXNwb25zZS5kYXRhLnBhcmNlbHMNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcnJFbXByZXNhcy5wdXNoKHJlc3BvbnNlLmRhdGEpDQogICAgICAgICAgICAgICAgICAgIHRoaXMuZmxhZ0luZGljYXRpbmdEYXRhSGFzQmVlbkxvYWRlZEluVmFyaWFibGVzID0gZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lc3RhbXAoKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZih0aGlzLmlzX3N1cGVydXNlciB8fCB0aGlzLmlzX3N5c3RlbWFkbWluKXsNCiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmluZm8oJ2VudHJhJykNCiAgICAgICAgICAgICAgICAgICAgZ2V0QWxsRW50ZXJwcmlzZXMoKQ0KICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyByZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckVtcHJlc2FzID0gcmVzcG9uc2UuZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJFbXByZXNhc0xpc3QgPSByZXNwb25zZS5kYXRhDQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnJQYXJjZWxzID0gW10NCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEubWFwKGVudGVycHJpc2UgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGVycHJpc2UucGFyY2Vscy5mZWF0dXJlcy5tYXAocGFyY2VsID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyUGFyY2Vscy5wdXNoKHBhcmNlbCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXMgPSBhcnJQYXJjZWxzDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbFBhcmNlbHNPZkVudGVycHJpc2VzRmlsdGVyID0gYXJyUGFyY2Vscw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFnSW5kaWNhdGluZ0RhdGFIYXNCZWVuTG9hZGVkSW5WYXJpYWJsZXMgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgfWVsc2UgaWYoKHRoaXMuaXNfZW50ZXJwcmlzZWFkbWluIHx8IHRoaXMuaXNfc3RhZmYpICYmICF0aGlzLmlzX2Nvb3BfdXNlcil7IA0KICAgICAgICAgICAgICAgICAgICBnZXRFbnRlcnByaXNlKHVzZXIuZW50ZXJwcmlzZV9pZCkNCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgcmVzcG9uc2UgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJFbXByZXNhcyA9IFtyZXNwb25zZS5kYXRhXQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJFbXByZXNhc0xpc3QgPSBbcmVzcG9uc2UuZGF0YV0NCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyclBhcmNlbHMgPSBbXQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5wYXJjZWxzLmZlYXR1cmVzLm1hcChwYXJjZWwgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyclBhcmNlbHMucHVzaChwYXJjZWwpDQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxQYXJjZWxzT2ZFbnRlcnByaXNlcyA9IGFyclBhcmNlbHMNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUGFyY2Vsc09mRW50ZXJwcmlzZXNGaWx0ZXIgPSBhcnJQYXJjZWxzDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsYWdJbmRpY2F0aW5nRGF0YUhhc0JlZW5Mb2FkZWRJblZhcmlhYmxlcyA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLmlzX2Nvb3BfdXNlcil7DQogICAgICAgICAgICAgICAgICAgIGdldENvb3BlcmF0aXZlKHVzZXIuZW50ZXJwcmlzZV9pZCkNCiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcnJDb29wZXJhdGl2YXMgPSBbcmVzcG9uc2UuZGF0YV0NCiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5hcnJFbXByZXNhcyA9IHJlc3BvbnNlLmRhdGEuZW50ZXJwcmlzZXMNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxhZ0luZGljYXRpbmdEYXRhSGFzQmVlbkxvYWRlZEluVmFyaWFibGVzID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNfc3VwZXJ1c2VyIHx8IHRoaXMuaXNfc3lzdGVtYWRtaW4pew0KICAgICAgICAgICAgICAgICAgICBnZXRBbGxDb29wZXJhdGl2ZXMoKQ0KICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyByZXNwb25zZSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFyckNvb3BlcmF0aXZhcyA9IHJlc3BvbnNlLmRhdGENCiAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZUxvYWRpbmcgPSBmYWxzZQ0KICAgICAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlTG9hZCA9IGZhbHNlDQogICAgICAgICAgICB9KQ0KICAgICAgICB9KQ0KICAgIH0NCn0NCg=="},{"version":3,"sources":["InportParcelsComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"InportParcelsComponent.vue","sourceRoot":"src/components/importParcels","sourcesContent":["<template>\r\n    <div class=\"bx--grid\">\r\n        <br>\r\n        <div id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <h2>Importar Parcelas desde .zip <img src=\"../../assets/agriculture-analytics.svg\" style=\"width: 40px;\"></h2>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div id=\"txt-explicativo\" class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Para poder importar parcelas desde un .zip, este tiene que contener archivos con las extensiones xxx.dbf, xxx.prf, xxx.shp, xxx.shx</p>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\" style=\"margin-top: 20px;\">\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-select\r\n                    theme=\"\"\r\n                    :label=\"$t('map.listado_empresas')\"\r\n                    :hide-label=\"false\"\r\n                    :inline=\"false\"\r\n                    :disabled=\"false\"\r\n                    @change=\"seleccionaEmpresa\"\r\n                    v-model=\"selectValueEmpresa\"\r\n                >\r\n                    <cv-select-option :value=\"''\" disabled selected hidden>{{$t(\"map.sel_empresa\")}}</cv-select-option>\r\n                    <cv-select-optgroup label=\"Todas las Empresas\" v-if=\"is_superuser || is_systemadmin\">\r\n                        <cv-select-option :value=\"`all`\" v-if=\"is_superuser || is_systemadmin\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in arrEmpresasList\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                    <cv-select-optgroup :label=\"`Cooperativa ${cooperativa.name}`\" v-bind:key=\"cooperativa.id\" v-for=\"cooperativa in arrCooperativas\">\r\n                        <cv-select-option :value=\"`coop_${cooperativa.id}`\">{{$t(\"map.most_todas_empresas\")}}</cv-select-option>\r\n                        <cv-select-option v-for=\"empresa in cooperativa.enterprises\" :value=\"String(empresa.id)\"  v-bind:key=\"empresa.id\">\r\n                            {{empresa.name}}\r\n                        </cv-select-option>\r\n                    </cv-select-optgroup>\r\n                </cv-select>\r\n            </div>\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-file-uploader\r\n                kind=\"\"\r\n                label=\"Subir Archivo\"\r\n                helperText=\"El formato permitido es .zip\"\r\n                :accept=\"['.zip']\"\r\n                :clear-on-reselect=\"false\"\r\n                :initial-state-uploading=\"false\"\r\n                :multiple=\"false\"\r\n                :removable=\"true\"\r\n                @change=\"onChangeFiles\"\r\n                remove-aria-label=\"Custom remove aria label\" ref=\"fileUploader\">\r\n                </cv-file-uploader>\r\n            </div>\r\n            <div class=\"bx--col-sm-12 bx--col-md-3 bx--col-lg-3\">\r\n                <cv-button\r\n                    kind=\"primary\"\r\n                    :disabled=\"false\"\r\n                    @click=\"importarParcelas\"\r\n                >\r\n                    Subir archivo y ver resumen de importación\r\n                </cv-button>\r\n                <p></p>\r\n                <div style=\"margin-top: 15px;\">\r\n                   <p style=\" line-height: 1.3;\"><b style=\"color: red;font-weight: bold;\">Importante:</b> Las parcelas importadas <b style=\"font-weight: bold;\">NO</b> actualizarán la descripción <span style=\"font-style: italic;\">(campo description)</span> ni el nombre de las parcelas ya existentes en la empresa.\r\n                   </p> \r\n            </div>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Parcelas compatibles con Sentinel {{procesadas.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"procesadas\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n            <div class=\"bx--col\">\r\n                <p>Errores en Sentinel {{errores.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"errores\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n            <div class=\"bx--col\">\r\n                <p>Cambiadas con respecto a la importación anterior {{cambiadas.length}}</p>\r\n                <br>\r\n                <cv-data-table\r\n                    :columns=\"['Nombre de parcela']\" \r\n                    :data=\"cambiadas\"   \r\n                    ref=\"table\"\r\n                ></cv-data-table>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"bx--row\">\r\n            <div class=\"bx--col\">\r\n                <p>Se van a importar {{totalParcelas}} Parcelas</p>\r\n                <cv-button\r\n                    kind=\"primary\"\r\n                    :disabled=\"totalParcelas ? false : true\"\r\n                    @click=\"importarParcelasConfirmar\">\r\n                    Confirmar importación\r\n                </cv-button>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <cv-modal\r\n            close-aria-label=\"Cerrar\"\r\n            size=\"large\"\r\n            :visible=\"visibleModal\"\r\n            @primary-click=\"actionPrimary\"\r\n            @modal-hidden=\"actionVisibleModal(false)\"\r\n            :auto-hide-off=\"false\">\r\n            <template v-if=\"true\" slot=\"title\">Selección de Parcelas</template>\r\n            <template v-if=\"false\" slot=\"title\">{{empresa.name}}</template>\r\n            <template v-if=\"true\" slot=\"content\" style=\"padding-right: 0%\">\r\n                <p>Selecciona a continuación las parcelas sobre las que quieres realizar la consulta. Puedes utilizar el buscador para encontrar la/s parcela/s que necesitas. Para poder ver el nombre de todas las parcelas, por favor utiliza el selector que encontrarás en la parte inferior de la tabla.</p>\r\n                <cv-data-table\r\n                :sortable=\"false\"\r\n                :pagination=\"{ \r\n                    numberOfItems: allParcelsOfEnterprisesFilter.length, \r\n                    pageSizes: [\r\n                        {\r\n                            value: 10,\r\n                            label: '10'\r\n                        }, \r\n                        {\r\n                            value: 15,\r\n                            label: '15'\r\n                        },\r\n                        {\r\n                            value: 20,\r\n                            label: '20'\r\n                        }, \r\n                        {\r\n                            value: 25,\r\n                            label: '25'\r\n                        }, \r\n                        {\r\n                            value: allParcelsOfEnterprisesFilter.length,\r\n                            label: 'Todas'\r\n                        }\r\n                    ] \r\n                }\" \r\n                @pagination=\"actionOnPagination\"\r\n                :columns=\"[\r\n                    {\r\n                        key: 'name',\r\n                        label: this.$t('graficos.nombre'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'description',\r\n                        label: this.$t('graficos.descrip'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'heactareas',\r\n                        label: this.$t('graficos.hectareas'),\r\n                        'sortable': false\r\n                    },\r\n                    {\r\n                        key: 'enterprise',\r\n                        label: 'Empresa',\r\n                        'sortable': false\r\n                    },\r\n                ]\"\r\n                @sort=\"onSort\"\r\n                v-model=\"rowSelects\"\r\n                ref=\"tableLstadoT2MultiCoop\"\r\n                searchLabel=\"Filter\" searchPlaceholder=\"Filter\" searchClearLabel=\"Clear filter\"\r\n            >\r\n                <template v-if=\"true\" slot=\"actions\">\r\n                    <cv-search :placeholder=\"$t('graficos.buscar_nombre')\" @input=\"onBuscar\"></cv-search>\r\n                </template>\r\n                <template v-if=\"true\" slot=\"batch-actions\">\r\n                    <cv-button>\r\n                        \r\n                    </cv-button>  \r\n                </template>\r\n                <template slot=\"data\">\r\n                    <cv-data-table-row\r\n                        v-for=\"feature in allParcelsOfEnterprisesFilter.slice(start, start+length)\"\r\n                        :key=\"`${feature.id}`\"\r\n                        :value=\"`${feature.id}`\"\r\n                        :aria-label-for-batch-checkbox=\"`Custom aria label for row ${feature.id} batch`\"\r\n                    >\r\n                        <cv-data-table-cell>{{is_superuser ? feature.id+' - ' : ''}}{{feature.properties.name}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{feature.properties.description}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{feature.properties.area}}</cv-data-table-cell>\r\n                        <cv-data-table-cell>{{getNameEnterprise(feature.properties.enterprise_id)}}</cv-data-table-cell>\r\n                    </cv-data-table-row>\r\n                </template>\r\n            </cv-data-table>\r\n            </template>\r\n            <template slot=\"primary-button\">Seleccionar</template>\r\n        </cv-modal>\r\n        <AlertaGeneral ref=\"alertaGenerall\" :tituloAlert=\"mensajeAlerta\" :tipoAlert=\"tipoAlerta\" />\r\n        <cv-loading\r\n            :active=\"isActiveLoading\"\r\n            :overlay=\"true\">\r\n        </cv-loading>\r\n\r\n    \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {getProfile, getPermisos} from '@/auth/index'\r\nimport {getAllEnterprises, getEnterprise} from '@/crudFunctions/crudEnterprise'//getFechasSentinelForInformes\r\nimport {getAllCooperatives, getCooperative} from '@/crudFunctions/crudCooperativas'\r\nimport {importParcelsFromFile} from '@/crudFunctions/crudEnterprise'\r\nimport AlertaGeneral from \"@/components/AlertaGeneral\";\r\nexport default {\r\n    name: 'Monitor',\r\n    components: {AlertaGeneral},\r\n    data(){\r\n        return {\r\n            isActiveLoading: false,\r\n            exportarExcel: false,\r\n            //\r\n            keyComponentMonitor: 0,\r\n            visibleModal: false,\r\n            data: {},\r\n            fechasArr: Array(),\r\n            //\r\n            selectValueEmpresa: '',\r\n            //\r\n            flagIndicatingDataHasBeenLoadedInVariables: false,\r\n            //Usuario\r\n            is_superuser: false,\r\n            is_staff: false,\r\n            is_systemadmin: false,\r\n            is_enterpriseadmin: false,\r\n            is_coop_user: false,\r\n            //Empresas sel\r\n            arrEmpresas: [],\r\n            arrEmpresasList: [],\r\n            arrCooperativas: [],\r\n            allParcelsOfEnterprises: [],\r\n            allParcelsOfEnterprisesFilter: [],\r\n            //\r\n            start: 0,\r\n            length: 10,\r\n            //\r\n            rowSelects: [],\r\n            selectValueCapa: '',\r\n            //\r\n            SentinelLayer: 'NDVI',\r\n            calOptions: {\r\n                \"dateFormat\": \"Y-m-d\"\r\n            },\r\n            time: ``,\r\n            valueDates: [],\r\n            valueRange: [],\r\n            timeValuesArr: [],\r\n            nombreInforme: `Gráfico - ${this.getNow()}`,\r\n            checked_clouds: false,\r\n            //\r\n            tipoAlerta: `error`,\r\n            mensajeAlerta: '',\r\n            //\r\n            fechasParcelasNumImages: {},\r\n            verCargandoImagenes: false,\r\n            //\r\n            disabledGenerar: false,\r\n            //\r\n            verErrorIntervalo: false,\r\n            verCargandoFechasBbox: false,\r\n            //\r\n            initialStep: 1,\r\n            steps: [\r\n                \"Nombre de informe y Selección de Parcelas\",\r\n                \"Selección de capas y Nubes\",\r\n                \"Selección de Fechas\",\r\n                \"Resumen de Informe\",\r\n            ],\r\n            open: [false, false, false, false],\r\n            verTimeoutNumImg: false,\r\n            //\r\n            file: null,\r\n            procesadas: [],\r\n            errores: [],\r\n            cambiadas: [],\r\n            totalParcelas: 0\r\n        }\r\n    },\r\n    methods: {\r\n        actionVisibleModal(action){\r\n            this.visibleModal = action\r\n        },\r\n        \r\n        onChangeFiles(file){\r\n            this.file = file\r\n        },\r\n        importarParcelas(){\r\n            if(!this.file){\r\n                console.info('No hay archivo')\r\n                this.mensajeAlerta = `Debe seleccionar un archivo`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            if(!this.selectValueEmpresa){\r\n                console.info('No hay empresa')\r\n                this.mensajeAlerta = `Debe seleccionar una empresa`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            console.info('Importando parcelas')\r\n            this.isActiveLoading = true\r\n            importParcelsFromFile(this.file[0].file, this.selectValueEmpresa, false)\r\n            .then(response => {\r\n                this.isActiveLoading = false\r\n                console.info(response.data)\r\n                const formattedProcesadas = []\r\n                response.data.procesadas.map(item => {\r\n                    formattedProcesadas.push([item])\r\n                })\r\n                const formattedErrores = []\r\n                response.data.Overlaps.map(item => {\r\n                    formattedErrores.push([item])\r\n                })\r\n                const formattedCambiadas = []\r\n                response.data.cambiadas.map(item => {\r\n                    formattedCambiadas.push([item])\r\n                })\r\n                this.procesadas = formattedProcesadas\r\n                this.errores = formattedErrores\r\n                this.totalParcelas = response.data.totalparcelas\r\n                this.cambiadas = formattedCambiadas\r\n\r\n            })\r\n            .catch(error => {\r\n                this.isActiveLoading = false\r\n                console.error(error)\r\n                this.mensajeAlerta = `Error al importar parcelas`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n            })\r\n        },\r\n\r\n        importarParcelasConfirmar(){\r\n            if(!this.file){\r\n                console.info('No hay archivo')\r\n                this.mensajeAlerta = `Debe seleccionar un archivo`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            if(!this.selectValueEmpresa){\r\n                console.info('No hay empresa')\r\n                this.mensajeAlerta = `Debe seleccionar una empresa`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n                return\r\n            }\r\n            console.info('Importando parcelas')\r\n            this.isActiveLoading = true\r\n            importParcelsFromFile(this.file[0].file, this.selectValueEmpresa, true)\r\n            .then(() => {\r\n                this.isActiveLoading = false\r\n                this.mensajeAlerta = `Parcelas importadas correctamente`\r\n                this.tipoAlerta = `success`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n            })\r\n            .catch(error => {\r\n                this.isActiveLoading = false\r\n                console.error(error)\r\n                this.mensajeAlerta = `Error al importar parcelas`\r\n                this.tipoAlerta = `error`\r\n                this.$refs.alertaGenerall.verAlerta()\r\n            })\r\n            this.mensajeAlerta = `Parcelas importadas correctamente`\r\n            this.tipoAlerta = `success`\r\n            this.$refs.alertaGenerall.verAlerta()\r\n        },\r\n        \r\n        seleccionaEmpresa(empresa){\r\n            const arrParcels = []\r\n            if(empresa == 'all'){\r\n                getAllEnterprises()\r\n                    .then(async response => {\r\n                        response.data.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n            }else{\r\n                const result = empresa.split('_')\r\n                if(result[0] == 'coop'){\r\n                    getCooperative(result[1])\r\n                    .then(response => {\r\n                        response.data.enterprises.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.arrEmpresas = response.data.enterprises\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }else{\r\n                    getEnterprise(empresa)\r\n                    .then(async response => {\r\n                        response.data.parcels.features.map(parcel => {\r\n                            arrParcels.push(parcel)\r\n                        })\r\n                        this.arrEmpresas = [response.data]\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        getNow() {\r\n            const today = new Date();\r\n            const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n            //const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n            //const dateTime = date +' '+ time;\r\n            //this.timestamp = dateTime;\r\n            //console.info(dateTime)\r\n            return date\r\n        },\r\n        getNameEnterprise(value){\r\n            const result = this.arrEmpresas.filter(enterprise => enterprise.id == value)\r\n            return result[0].name\r\n        },\r\n        onBuscar(busqueda){\r\n            if(busqueda){\r\n                const result = this.allParcelsOfEnterprises.filter(parcel => parcel.properties.name.toUpperCase().includes(busqueda.toUpperCase()))\r\n                this.allParcelsOfEnterprisesFilter = result\r\n            }else{\r\n                this.allParcelsOfEnterprisesFilter = this.allParcelsOfEnterprises\r\n            }\r\n        },\r\n        actionOnPagination(ev){\r\n            this.start = ev.start-1\r\n            this.length = ev.length\r\n        },\r\n        onSort(order) {\r\n            const index = order.index\r\n            let column = ``\r\n            const orden = order.order\r\n            \r\n            switch (index) {\r\n                case '0':\r\n                    column = `name`\r\n                    break\r\n                case '1':\r\n                    column = `name`\r\n                    break\r\n                case '2':\r\n                    column = 'area'\r\n                    break\r\n                case '3':\r\n                    column = 'enterprise'\r\n                    break\r\n                default:\r\n                    column = `name`\r\n            }\r\n            if(orden == 'ascending'){\r\n                this.allParcelsOfEnterprisesFilter.sort((a, b) => parseFloat(a.name) - parseFloat(b.name));\r\n            }\r\n            console.info(column)\r\n        },\r\n    },\r\n    mounted: function () {\r\n        //console.info(this.$refs.acc)\r\n        this.getNow()\r\n        //console.info('User Logged')\r\n    },\r\n    beforeCreate(){\r\n        getProfile()\r\n        .then(response => {\r\n            const user = response.data[0]\r\n            getPermisos(response.data[0].user)\r\n            .then(response => {\r\n                this.is_superuser = response.data.is_superuser\r\n                this.is_staff = response.data.is_staff\r\n                this.is_systemadmin = response.data.is_systemadmin\r\n                this.is_enterpriseadmin = response.data.is_enterpriseadmin\r\n                this.is_coop_user = user.cooperative_user\r\n                /*\r\n                //*Obtenemos la empresa del usuario\r\n                const enterprise_id = user.enterprise_id\r\n                getEnterprise(enterprise_id)\r\n                .then(async response => {\r\n                    this.parcelas = response.data.parcels\r\n                    await this.arrEmpresas.push(response.data)\r\n                    this.flagIndicatingDataHasBeenLoadedInVariables = false\r\n                    this.timestamp()\r\n                })\r\n                */\r\n                \r\n                if(this.is_superuser || this.is_systemadmin){\r\n                    //console.info('entra')\r\n                    getAllEnterprises()\r\n                    .then(async response => {\r\n                        this.arrEmpresas = response.data\r\n                        this.arrEmpresasList = response.data\r\n                        const arrParcels = []\r\n                        response.data.map(enterprise => {\r\n                            enterprise.parcels.features.map(parcel => {\r\n                                arrParcels.push(parcel)\r\n                            })\r\n                        })\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }else if((this.is_enterpriseadmin || this.is_staff) && !this.is_coop_user){ \r\n                    getEnterprise(user.enterprise_id)\r\n                    .then(async response => {\r\n                        this.arrEmpresas = [response.data]\r\n                        this.arrEmpresasList = [response.data]\r\n                        const arrParcels = []\r\n                        response.data.parcels.features.map(parcel => {\r\n                            arrParcels.push(parcel)\r\n                        })\r\n                        this.allParcelsOfEnterprises = arrParcels\r\n                        this.allParcelsOfEnterprisesFilter = arrParcels\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }else if(this.is_coop_user){\r\n                    getCooperative(user.enterprise_id)\r\n                    .then(response => {\r\n                        this.arrCooperativas = [response.data]\r\n                        //this.arrEmpresas = response.data.enterprises\r\n                        this.flagIndicatingDataHasBeenLoadedInVariables = true\r\n                    })\r\n                }\r\n\r\n                if(this.is_superuser || this.is_systemadmin){\r\n                    getAllCooperatives()\r\n                    .then(async response => {\r\n                        this.arrCooperativas = response.data\r\n                    })\r\n                }\r\n                this.isActiveLoading = false\r\n                this.isVisibleLoad = false\r\n            })\r\n        })\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n    .bx--accordion__content{\r\n        padding-right: 0px!important;\r\n    }\r\n</style>"]}]}
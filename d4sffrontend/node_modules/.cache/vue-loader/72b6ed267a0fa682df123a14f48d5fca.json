{"remainingRequest":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\src\\components\\importParcels\\InportCampanaComponent.vue?vue&type=template&id=2d48c84d&scoped=true&","dependencies":[{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\src\\components\\importParcels\\InportCampanaComponent.vue","mtime":1671530138658},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\icamon.SMB\\Desktop\\Parcelas\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
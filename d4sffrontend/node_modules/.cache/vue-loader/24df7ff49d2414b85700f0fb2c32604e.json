{"remainingRequest":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\importParcels\\InportParcelsGeoJSONComponent.vue?vue&type=template&id=35e5ad04&scoped=true&","dependencies":[{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\src\\components\\importParcels\\InportParcelsGeoJSONComponent.vue","mtime":1709549732211},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\respana\\source\\D4SF\\d4sffrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
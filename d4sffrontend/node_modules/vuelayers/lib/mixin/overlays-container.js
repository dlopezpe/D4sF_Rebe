/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.37
 * @license MIT
 * @copyright (c) 2017-2021, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import Collection from 'ol/Collection';
import Overlay from 'ol/Overlay';
import Vue from 'vue';
import { merge } from 'rxjs/_esm5/internal/observable/merge';
import { getOverlayId, initializeOverlay } from '../ol-ext';
import { observableFromOlEvent } from '../rx-ext';
import { instanceOf } from '../util/assert';
import rxSubs from './rx-subs';
import identMap from './ident-map';

var overlaysContainer = {
  mixins: [identMap, rxSubs],
  computed: {
    overlayIds: function overlayIds() {
      var _context;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context = this.getOverlays()).call(_context, getOverlayId);
    },
    overlaysCollectionIdent: function overlaysCollectionIdent() {
      if (!this.olObjIdent) return;
      return this.makeIdent(this.olObjIdent, 'overlays_collection');
    }
  },
  methods: {
    /**
     * @param {Overlay|Vue} overlay
     * @return {void}
     */
    addOverlay: function addOverlay(overlay) {
      overlay = overlay instanceof Vue ? overlay.$overlay : overlay;
      instanceOf(overlay, Overlay);

      if (this.getOverlayById(getOverlayId(overlay)) == null) {
        initializeOverlay(overlay);
        this.$overlaysCollection.push(overlay);
      }
    },

    /**
     * @param {Overlay|Vue} overlay
     * @return {void}
     */
    removeOverlay: function removeOverlay(overlay) {
      overlay = this.getOverlayById(getOverlayId(overlay));
      if (!overlay) return;
      this.$overlaysCollection.remove(overlay);
    },

    /**
     * @return {Overlay[]}
     */
    getOverlays: function getOverlays() {
      var _context2;

      return _sliceInstanceProperty(_context2 = this.$overlaysCollection.getArray()).call(_context2);
    },

    /**
     * @return {Collection<Overlay>}
     */
    getOverlaysCollection: function getOverlaysCollection() {
      return this._overlaysCollection;
    },

    /**
     * @param {string|number} overlayId
     * @return {Overlay|undefined}
     */
    getOverlayById: function getOverlayById(overlayId) {
      var _context3;

      return _findInstanceProperty(_context3 = this.$overlaysCollection.getArray()).call(_context3, function (overlay) {
        return getOverlayId(overlay) === overlayId;
      });
    },

    /**
     * @return {void}
     */
    clearOverlays: function clearOverlays() {
      this.$overlaysCollection.clear();
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return {
        get overlaysContainer() {
          return vm;
        }

      };
    }
  },
  created: function created() {
    this._overlaysCollection = this.instanceFactoryCall(this.overlaysCollectionIdent, function () {
      return new Collection();
    });
    defineServices.call(this);
    subscribeToCollectionEvents.call(this);
  }
};

function defineServices() {
  Object.defineProperties(this, {
    $overlaysCollection: {
      enumerable: true,
      get: this.getOverlaysCollection
    }
  });
}

function subscribeToCollectionEvents() {
  var _this = this;

  var adds = observableFromOlEvent(this.$overlaysCollection, 'add');
  var removes = observableFromOlEvent(this.$overlaysCollection, 'remove');
  this.subscribeTo(merge(adds, removes), function (_ref) {
    var type = _ref.type,
        element = _ref.element;
    ++_this.rev;

    _this.$nextTick(function () {
      _this.$emit(type + ':overlay', element);
    });
  });
}

export default overlaysContainer;

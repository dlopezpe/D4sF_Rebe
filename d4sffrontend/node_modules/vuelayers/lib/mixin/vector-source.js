/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.37
 * @license MIT
 * @copyright (c) 2017-2021, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import debounce from 'debounce-promise';
import mergeDescriptors from '../util/multi-merge-descriptors';
import { makeWatchers } from '../util/vue-helpers';
import featuresContainer from './features-container';
import projTransforms from './proj-transforms';
import source from './source';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) { symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source$$1 = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source$$1), true).forEach(function (key) { _defineProperty(target, key, source$$1[key]); }); } else if (_Object$getOwnPropertyDescriptors) { Object.defineProperties(target, _Object$getOwnPropertyDescriptors(source$$1)); } else { ownKeys(Object(source$$1)).forEach(function (key) { Object.defineProperty(target, key, _Object$getOwnPropertyDescriptor(source$$1, key)); }); } } return target; }
var vectorSource = {
  mixins: [source, featuresContainer, projTransforms],
  props: {
    useSpatialIndex: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    /**
     * @return {void}
     */
    clear: function clear() {
      featuresContainer.methods.clearFeatures.call(this);
    },

    /**
     * @return {Object}
     * @protected
     */
    getServices: function getServices() {
      return mergeDescriptors(source.methods.getServices.call(this), featuresContainer.methods.getServices.call(this));
    },

    /**
     * @return {Promise}
     * @protected
     */
    init: function init() {
      return source.methods.init.call(this);
    },

    /**
     * @return {void|Promise<void>}
     * @protected
     */
    deinit: function deinit() {
      return source.methods.deinit.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    mount: function mount() {
      return source.methods.mount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    unmount: function unmount() {
      return source.methods.unmount.call(this);
    },

    /**
     * @return {void}
     * @protected
     */
    subscribeAll: function subscribeAll() {
      source.methods.subscribeAll.call(this);
    },

    /**
     * @param feature
     * @return {ReadonlyArray<any>}
     * @protected
     */
    writeFeatureInDataProj: function writeFeatureInDataProj(feature) {
      return projTransforms.methods.writeFeatureInDataProj.call(this, feature);
    },

    /**
     * @param feature
     * @return {ReadonlyArray<any>}
     * @protected
     */
    writeGeometryInViewProj: function writeGeometryInViewProj(feature) {
      return projTransforms.methods.writeFeatureInViewProj.call(this, feature);
    },
    addFeature: function addFeature(feature) {
      return featuresContainer.methods.addFeature.call(this, feature);
    },
    removeFeatures: function removeFeatures(features) {
      return featuresContainer.methods.removeFeatures.call(this, features);
    }
  },
  watch: _objectSpread({
    featuresDataProj: {
      deep: true,
      handler: debounce(function (features) {
        this.$emit('update:features', _sliceInstanceProperty(features).call(features));
      }, 1000 / 60)
    }
  }, makeWatchers(['useSpatialIndex'], function () {
    return function () {
      return this.scheduleRecreate();
    };
  })),
  stubVNode: {
    empty: false,
    attrs: function attrs() {
      return {
        id: this.vmId,
        class: this.cmpName
      };
    }
  }
};

export default vectorSource;

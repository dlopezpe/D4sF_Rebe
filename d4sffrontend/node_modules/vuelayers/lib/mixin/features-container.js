/**
 * VueLayers
 * Web map Vue components with the power of OpenLayers
 *
 * @package vuelayers
 * @author Vladimir Vershinin <ghettovoice@gmail.com>
 * @version 0.11.37
 * @license MIT
 * @copyright (c) 2017-2021, Vladimir Vershinin <ghettovoice@gmail.com>
 */
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import Collection from 'ol/Collection';
import Feature from 'ol/Feature';
import Vue from 'vue';
import { merge } from 'rxjs/_esm5/internal/observable/merge';
import { debounceTime } from 'rxjs/_esm5/internal/operators/debounceTime';
import { getFeatureId, getObjectUid, initializeFeature, mergeFeatures } from '../ol-ext';
import { instanceOf } from '../util/assert';
import { forEach, isPlainObject } from '../util/minilo';
import projTransforms from './proj-transforms';
import rxSubs from './rx-subs';
import identMap from './ident-map';
import { observableFromOlEvent } from '../rx-ext';

var featuresContainer = {
  mixins: [identMap, rxSubs, projTransforms],
  computed: {
    featureIds: function featureIds() {
      var _context;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context = this.getFeatures()).call(_context, getFeatureId);
    },
    featuresViewProj: function featuresViewProj() {
      var _context2;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context2 = this.getFeatures()).call(_context2, this.writeFeatureInViewProj.bind(this));
    },
    featuresDataProj: function featuresDataProj() {
      var _context3;

      if (!this.rev) return [];
      return _mapInstanceProperty(_context3 = this.getFeatures()).call(_context3, this.writeFeatureInDataProj.bind(this));
    },
    featuresCollectionIdent: function featuresCollectionIdent() {
      if (!this.olObjIdent) return;
      return this.makeIdent(this.olObjIdent, 'features_collection');
    }
  },
  methods: {
    /**
     * @param {Array<(Feature|Vue|Object)>} features
     * @return {void}
     */
    addFeatures: function addFeatures(features) {
      forEach(features, this.addFeature.bind(this));
    },

    /**
     * @param {Feature|Vue|Object} feature
     * @return {void}
     */
    addFeature: function addFeature(feature) {
      if (feature instanceof Vue) {
        feature = feature.$feature;
      } else if (isPlainObject(feature)) {
        feature = this.readFeatureInDataProj(feature);
      }

      instanceOf(feature, Feature);
      initializeFeature(feature);
      var foundFeature = this.getFeatureById(getFeatureId(feature));

      if (foundFeature == null) {
        this.$featuresCollection.push(feature);
      } else {
        mergeFeatures(foundFeature, feature);
      }
    },

    /**
     * @param {Array<(Feature|Vue|Object)>} features
     * @return {void}
     */
    removeFeatures: function removeFeatures(features) {
      forEach(features, this.removeFeature.bind(this));
    },

    /**
     * @param {Feature|Vue|Object} feature
     * @return {void}
     */
    removeFeature: function removeFeature(feature) {
      feature = this.getFeatureById(getFeatureId(feature));
      if (!feature) return;
      initializeFeature(feature);
      this.$featuresCollection.remove(feature);
    },

    /**
     * @return {void}
     */
    clearFeatures: function clearFeatures() {
      this.$featuresCollection.clear();
    },

    /**
     * @param {string|number} featureId
     * @return {Feature|undefined}
     */
    getFeatureById: function getFeatureById(featureId) {
      var _context4;

      // todo add hash {featureId => featureIdx, ....}
      return _findInstanceProperty(_context4 = this.$featuresCollection.getArray()).call(_context4, function (feature) {
        return getFeatureId(feature) === featureId;
      });
    },

    /**
     * @return {Feature[]}
     */
    getFeatures: function getFeatures() {
      var _context5;

      return _sliceInstanceProperty(_context5 = this.$featuresCollection.getArray()).call(_context5);
    },

    /**
     * @return {Collection<Feature>>}
     */
    getFeaturesCollection: function getFeaturesCollection() {
      return this._featuresCollection;
    },

    /**
     * @returns {Object}
     * @protected
     */
    getServices: function getServices() {
      var vm = this;
      return {
        get featuresContainer() {
          return vm;
        }

      };
    }
  },
  created: function created() {
    this._featuresCollection = this.instanceFactoryCall(this.featuresCollectionIdent, function () {
      return new Collection();
    });
    this._featureSubs = {};
    defineServices.call(this);
    subscribeToCollectionEvents.call(this);
  }
};

function defineServices() {
  Object.defineProperties(this, {
    $featuresCollection: {
      enumerable: true,
      get: this.getFeaturesCollection
    }
  });
}

function subscribeToCollectionEvents() {
  var _this = this;

  var adds = observableFromOlEvent(this.$featuresCollection, 'add');
  this.subscribeTo(adds, function (_ref) {
    var element = _ref.element;
    var elementUid = getObjectUid(element);
    var propChanges = observableFromOlEvent(element, 'propertychange');
    var otherChanges = observableFromOlEvent(element, 'change');
    var featureChanges = merge(propChanges, otherChanges).pipe(debounceTime(1000 / 60));
    _this._featureSubs[elementUid] = _this.subscribeTo(featureChanges, function () {
      ++_this.rev;
    });
    ++_this.rev;

    _this.$nextTick(function () {
      _this.$emit('add:feature', element);
    });
  });
  var removes = observableFromOlEvent(this.$featuresCollection, 'remove');
  this.subscribeTo(removes, function (_ref2) {
    var element = _ref2.element;
    var elementUid = getObjectUid(element);

    if (_this._featureSubs[elementUid]) {
      _this.unsubscribe(_this._featureSubs[elementUid]);

      delete _this._featureSubs[elementUid];
    }

    ++_this.rev;

    _this.$nextTick(function () {
      _this.$emit('remove:feature', element);
    });
  });
}

export default featuresContainer;
